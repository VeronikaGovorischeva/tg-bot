from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from trainings import get_next_training
from data import *
from games import *
from config import *


# –ó–∞–≥–∞–ª–æ–º –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞, –∞–ª–µ –º–æ–∂–Ω–∞ —Ç–µ–∫—Å—Ç –∑–º—ñ–Ω–∏—Ç–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    user_id = user.id

    # Load existing user data
    user_data = load_data(JSON_FILE)

    # Check if user is already registered
    if str(user_id) in user_data and "name" in user_data[str(user_id)] and "team" in user_data[str(user_id)]:
        await update.message.reply_text(
            f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–æ–º–∞–Ω–¥–∏ /next_training /next_game —Ç–∞ /list_games —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —ñ–Ω—Ñ—É –ø—Ä–æ –Ω–∞—Å—Ç—É–ø–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ –Ω–∞—Å—Ç—É–ø–Ω—É –≥—Ä—É."
        )  # –ù–µ –∑–Ω–∞—é —è–∫ –∫—Ä–∞—â–µ –Ω–∞–ø–∏—Å–∞—Ç–∏
        return ConversationHandler.END

    # Store basic user info
    else:
        user_data[str(user_id)] = {
            "telegram_username": user.username
        }
        save_data(user_data, JSON_FILE)

    # Ask for the user's name
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è –ê–ù–ì–õ–Ü–ô–°–¨–ö–û–Æ"
    )  # –ó–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Ç–æ–≥–æ —è–∫ –º–∏ –±—É–¥–µ–º–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏

    return NAME


# –ü–æ–∫–∏ –Ω–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ —è–∫ –∫—Ä–∞—â–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –¥–µ–±—Ç, –∞ —ñ–Ω—à–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
async def name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = str(update.message.from_user.id)
    user_input_name = update.message.text

    # Load existing user data
    user_data = load_data(JSON_FILE)
    user_data[user_id]["name"] = user_input_name
    user_data[user_id]["debt"] = [
        0]  # –¢—Ä–µ–±–∞ –ø–æ–¥—É–º–∞—Ç–∏ —è–∫ –∫—Ä–∞—â–µ –æ—Ü–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏( –∞–±–æ –º–∞—Å–∏–≤ –º–∞—Å–∏–≤—ñ–≤ –∞–±–æ –¥—ñ–∫—Ç –¥—ñ–∫—Ç—ñ–≤) –∞–ª–µ –∑–∞–≥–∞–ª–æ–º –º–æ–∂–Ω–∞ –ø—Ä–æ—Å—Ç–æ –≤ –º–∞—Å–∏–≤ —ñ —á—ñ–ª–∏—Ç–∏
    save_data(user_data, JSON_FILE)

    # Create keyboard for team selection
    keyboard = [
        [
            InlineKeyboardButton("–ß–æ–ª–æ–≤—ñ—á–∞", callback_data="team_male"),
            InlineKeyboardButton("–ñ—ñ–Ω–æ—á–∞", callback_data="team_female"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–î—è–∫—É—é! –¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É:",
        reply_markup=reply_markup
    )

    return TEAM


# –ü—Ä–æ—Å—Ç–æ –∑–º—ñ–Ω–∏—Ç–∏ —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
async def team(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    team_choice = "Male" if query.data == "team_male" else "Female"

    # Load existing user data
    user_data = load_data(JSON_FILE)
    user_data[user_id]["team"] = team_choice
    save_data(user_data, JSON_FILE)

    await query.edit_message_text(
        f"–†–µ—î—Å—Ç—Ä–µ–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n"
        f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–æ–º–∞–Ω–¥–∏ /next_training –¥–ª—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è "
        f"—Ç–∞ /next_game –¥–ª—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —ñ–≥—Ä–∏."
    )

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /start —â–æ–± —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É."
    )
    return ConversationHandler.END


async def error(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    print(f"Update {update} caused error {context.error}")


async def next_training(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(get_next_training())


async def next_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.message.from_user.id)
    user_data = load_data(JSON_FILE)

    # If user is registered, show games for their team
    if user_id in user_data and "team" in user_data[user_id]:
        await update.message.reply_text(get_next_game(user_data[user_id]["team"]))
    else:
        print("–ó–∞–≤–µ—Ä—à–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–∞—Å—Ç—É–ø–Ω—É –≥—Ä—É")


async def add_game_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # Check if user is authorized
    if not is_authorized(update.message.from_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ–∑–≤–æ–ª—É –Ω–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —ñ–≥—Ä–∏.")
        return ConversationHandler.END

    await update.message.reply_text(
        "–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –≥—Ä–∏:\n"
        "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –≥—Ä–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 25.03.2025)"
    )

    return GAME_DATE


# –¢—Ä–µ–±–∞ –¥–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–Ω–∏—Ö
async def game_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['game_date'] = update.message.text

    await update.message.reply_text(
        "–í–≤–µ–¥—ñ—Ç—å —á–∞—Å –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–• (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 19:00)"
    )

    return GAME_TIME


# –¢—Ä–µ–±–∞ –¥–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–Ω–∏—Ö
async def game_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['game_time'] = update.message.text

    await update.message.reply_text(
        "–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ü–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –≥—Ä–∏ (–∞–¥—Ä–µ—Å—É –∞–±–æ –Ω–∞–∑–≤—É —Å–ø–æ—Ä—Ç–∑–∞–ª—É)"
    )

    return GAME_LOCATION


async def game_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['game_location'] = update.message.text

    await update.message.reply_text(
        "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ—Ç–∏ —è–∫–æ—ó –∫–æ–º–∞–Ω–¥–∏ –±—É–¥–µ –≥—Ä–∞"
    )

    return GAME_OPPONENT


async def game_opponent(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['game_opponent'] = update.message.text

    keyboard = [
        [
            InlineKeyboardButton("–ß–æ–ª–æ–≤—ñ—á–∞ –∫–æ–º–∞–Ω–¥–∞", callback_data="add_male"),
            InlineKeyboardButton("–ñ—ñ–Ω–æ—á–∞ –∫–æ–º–∞–Ω–¥–∞", callback_data="add_female"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É, –¥–ª—è —è–∫–æ—ó –¥–æ–¥–∞—î—Ç—å—Å—è –≥—Ä–∞:",
        reply_markup=reply_markup
    )

    return GAME_TEAM


async def game_team(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    team_choice = "Male" if query.data == "add_male" else "Female"
    context.user_data['game_team'] = team_choice

    # Save the game data
    add_game(
        date=context.user_data['game_date'],
        time=context.user_data['game_time'],
        location=context.user_data['game_location'],
        opponent=context.user_data['game_opponent'],
        team=team_choice
    )

    await query.edit_message_text(
        f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≥—Ä—É —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–ª—è {team_choice} –∫–æ–º–∞–Ω–¥–∏!\n"
        f"–ì—Ä–∞–≤—Ü—ñ –º–æ–∂—É—Ç—å –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ó—ó –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /next_game"
    )

    return ConversationHandler.END


# –ù–µ –∑–Ω–∞—é —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ü—å–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É —á–∏ —â–µ —â–æ—Å—å —Ç—Ä–µ–±–∞
async def list_games(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # Create team selection keyboard
    keyboard = [
        [
            InlineKeyboardButton("–ß–æ–ª–æ–≤—ñ—á–∞ –∫–æ–º–∞–Ω–¥–∞", callback_data="list_male"),
            InlineKeyboardButton("–ñ—ñ–Ω–æ—á–∞ –∫–æ–º–∞–Ω–¥–∞", callback_data="list_female"),
        ],
        [
            InlineKeyboardButton("–í—Å—ñ —ñ–≥—Ä–∏", callback_data="list_all"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —ñ–≥–æ—Ä:",
        reply_markup=reply_markup
    )


# –ù–∞—á–µ –Ω–æ—Ä–º –∞–ª–µ –¥—É–º–∞—é –º–æ–∂–Ω–∞ —Ç—Ä–æ—à–∫–∏ –∑–º—ñ–Ω–∏—Ç–∏
async def list_games_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    data = query.data
    games = list_all_games()

    # Filter by team if needed
    if data == "list_male":
        games = [game for game in games if game.get('team') == "Male"]
    elif data == "list_female":
        games = [game for game in games if game.get('team') == "Female"]

    if not games:
        await query.edit_message_text("–ù–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö —ñ–≥–æ—Ä.")
        return

    # Create a message with information about each game
    message = "üìÖ –°–ø–∏—Å–æ–∫ —ñ–≥–æ—Ä:\n\n"

    for i, game in enumerate(games, 1):
        team_str = f"–ö–æ–º–∞–Ω–¥–∞: {game.get('team', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        message += (f"{i}. –î–∞—Ç–∞: {game['date']} –æ {game['time']}\n"
                    f"   {team_str}"
                    f"   –ü—Ä–æ—Ç–∏: {game['opponent']}\n"
                    f"   –ú—ñ—Å—Ü–µ: {game['location']}\n"
                    f"   ID –≥—Ä–∏: {game['id']}\n\n")

    await query.edit_message_text(message)


# –¢–µ–∂ –Ω–∞—á–µ –Ω–æ—Ä–º
async def delete_game_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # Check if user is authorized
    if not is_authorized(update.message.from_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ–∑–≤–æ–ª—É –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ–≥–æ—Ä.")
        return

    # Check if game ID is provided
    if not context.args:
        await update.message.reply_text(
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /delete_game ID_–≥—Ä–∏\n"
            "–©–æ–± –ø–æ–±–∞—á–∏—Ç–∏ ID —ñ–≥–æ—Ä, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /list_games"
        )
        return
    game_id = context.args[0]

    # Create confirmation keyboard
    keyboard = [
        [
            InlineKeyboardButton("–¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_confirm_{game_id}"),
            InlineKeyboardButton("–ù—ñ, —Å–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="delete_cancel"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≥—Ä—É –∑ ID {game_id}?",
        reply_markup=reply_markup
    )


async def delete_game_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    callback_data = query.data

    if callback_data == "delete_cancel":
        await query.edit_message_text("–í–∏–¥–∞–ª–µ–Ω–Ω—è –≥—Ä–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        return

    if callback_data.startswith("delete_confirm_"):
        game_id = callback_data.replace("delete_confirm_", "")
        success, game = delete_game(game_id)

        if success:
            team_str = f"–ö–æ–º–∞–Ω–¥–∞: {game.get('team', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            await query.edit_message_text(
                f"–ì—Ä—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ:\n"
                f"–î–∞—Ç–∞: {game['date']} –æ {game['time']}\n"
                f"{team_str}"
                f"–ü—Ä–æ—Ç–∏: {game['opponent']}"
            )
        else:
            await query.edit_message_text(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≥—Ä—É –∑ ID {game_id}.")


async def edit_game_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not is_authorized(update.message.from_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ–∑–≤–æ–ª—É –Ω–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–≥–æ—Ä.")
        return ConversationHandler.END

    # Check if game ID is provided
    if not context.args:
        await update.message.reply_text(
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /edit_game ID_–≥—Ä–∏\n"
            "–©–æ–± –ø–æ–±–∞—á–∏—Ç–∏ ID —ñ–≥–æ—Ä, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /list_games"
        )
        return ConversationHandler.END

    game_id = context.args[0]
    game = get_game(game_id)

    if not game:
        await update.message.reply_text(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≥—Ä—É –∑ ID {game_id}.")
        return ConversationHandler.END

    context.user_data['edit_game_id'] = game_id

    # Display current game information
    team_str = f"–ö–æ–º–∞–Ω–¥–∞: {game.get('team', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
    await update.message.reply_text(
        f"–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≥—Ä–∏ –∑ ID {game_id}:\n\n"
        f"–ü–æ—Ç–æ—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:\n"
        f"1. –î–∞—Ç–∞: {game['date']}\n"
        f"2. –ß–∞—Å: {game['time']}\n"
        f"3. –ú—ñ—Å—Ü–µ: {game['location']}\n"
        f"4. –°—É–ø–µ—Ä–Ω–∏–∫: {game['opponent']}\n"
        f"5. –ß–∞—Å –ø—Ä–∏–±—É—Ç—Ç—è: {game['arrival_time']}\n"
        f"6. {team_str}\n"
        f"\n–í–∏–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ (–≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä):"
    )

    return EDIT_GAME_FIELD


async def edit_game_field(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    field_num = update.message.text.strip()
    field_mapping = {
        "1": "date",
        "2": "time",
        "3": "location",
        "4": "opponent",
        "5": "arrival_time",
        "6": "team",
    }

    if field_num not in field_mapping:
        await update.message.reply_text(
            "–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –ø–æ–ª—è. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—ñ–¥ 1 –¥–æ 6."
        )
        return EDIT_GAME_FIELD

    field = field_mapping[field_num]
    context.user_data['edit_field'] = field

    # Handle team field separately with buttons
    if field == "team":
        keyboard = [
            [
                InlineKeyboardButton("–ß–æ–ª–æ–≤—ñ—á–∞ –∫–æ–º–∞–Ω–¥–∞", callback_data="edit_male"),
                InlineKeyboardButton("–ñ—ñ–Ω–æ—á–∞ –∫–æ–º–∞–Ω–¥–∞", callback_data="edit_female"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É –∫–æ–º–∞–Ω–¥—É:",
            reply_markup=reply_markup
        )
        return EDIT_GAME_NEW_VALUE

    # For other fields, ask for text input
    field_names = {
        "date": "–¥–∞—Ç—É (–î–î.–ú–ú.–†–†–†–†)",
        "time": "—á–∞—Å (–ì–ì:–•–•)",
        "location": "–º—ñ—Å—Ü–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è",
        "opponent": "–Ω–∞–∑–≤—É –∫–æ–º–∞–Ω–¥–∏ —Å—É–ø–µ—Ä–Ω–∏–∫–∞",
        "arrival_time": "—á–∞—Å –ø—Ä–∏–±—É—Ç—Ç—è (–ì–ì:–•–•)",
    }

    await update.message.reply_text(f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–æ–ª—è '{field_names[field]}':")
    return EDIT_GAME_NEW_VALUE


async def edit_game_value(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # This handles text input
    if hasattr(update, 'message') and update.message:
        new_value = update.message.text.strip()
        field = context.user_data['edit_field']
        game_id = context.user_data['edit_game_id']

        success, updated_game = edit_game(game_id, field, new_value)

        if success:
            await update.message.reply_text(
                f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≥—Ä—É —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!\n"
                f"–ü–æ–ª–µ '{field}' –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '{new_value}'."
            )
        else:
            await update.message.reply_text(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –≥—Ä—É –∑ ID {game_id}.")

    # This handles callback for team selection
    elif hasattr(update, 'callback_query') and update.callback_query:
        query = update.callback_query
        await query.answer()

        new_value = "Male" if query.data == "edit_male" else "Female"
        field = context.user_data['edit_field']
        game_id = context.user_data['edit_game_id']

        success, updated_game = edit_game(game_id, field, new_value)

        if success:
            await query.edit_message_text(
                f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≥—Ä—É —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!\n"
                f"–ö–æ–º–∞–Ω–¥—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '{new_value}'."
            )
        else:
            await query.edit_message_text(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –≥—Ä—É –∑ ID {game_id}.")

    return ConversationHandler.END


# –ü–æ—Ç—ñ–º –∑–º—ñ–Ω–∏—Ç–∏ –∞–±–æ –¥–æ–¥–∞—Ç–∏ —â–æ—Å—å –≤ —Ä–∞–∑—ñ –ø–æ—Ç—Ä–µ–±–∏
async def check_debt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_data = load_data(JSON_FILE)
    await update.message.reply_text(f"–¢–≤—ñ–π –±–æ—Ä–≥: {str(user_data[str(update.message.from_user.id)]["debt"][0])} –≥—Ä–∏–≤–µ–Ω—å")
