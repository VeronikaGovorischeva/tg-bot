from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, CommandHandler, MessageHandler, filters
from data import load_data
from validation import ADMIN_IDS

SEND_MESSAGE_STATE = {}


async def send_message_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ß–æ–ª–æ–≤—ñ—á–∞ –∫–æ–º–∞–Ω–¥–∞", callback_data="send_team_Male"),
            InlineKeyboardButton("–ñ—ñ–Ω–æ—á–∞ –∫–æ–º–∞–Ω–¥–∞", callback_data="send_team_Female"),
        ],
        [InlineKeyboardButton("–û–±–∏–¥–≤—ñ –∫–æ–º–∞–Ω–¥–∏", callback_data="send_team_Both")]
    ])
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É, —è–∫—ñ–π —Ö–æ—á–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", reply_markup=keyboard)


async def handle_send_message_team_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    team = query.data.replace("send_team_", "")
    SEND_MESSAGE_STATE[query.from_user.id] = team

    await query.edit_message_text(
        f"–í–∏ –æ–±—Ä–∞–ª–∏: {team} –∫–æ–º–∞–Ω–¥–∞.\n\n–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.")


async def handle_send_message_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if update.message.text == "ü§°" or update.message.text == "üñï":
        await update.message.reply_text("ü§°")
        return
    if user_id not in SEND_MESSAGE_STATE:
        return

    team = SEND_MESSAGE_STATE.pop(user_id)
    message_text = update.message.text
    users = load_data("users")

    sender_username = update.message.from_user.username
    if sender_username:
        footer = f"\n\nüë§ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–≤(–ª–∞): @{sender_username}"
    else:
        footer = f"\n\nüë§ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–≤(–ª–∞): {update.message.from_user.first_name}"

    full_message = f"{message_text}{footer}"

    count = 0
    for uid, info in users.items():
        if team in [info.get("team"), "Both"]:
            try:
                await context.bot.send_message(chat_id=int(uid), text=full_message)
                count += 1
            except Exception as e:
                print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {uid}: {e}")

    await update.message.reply_text(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")


async def notify_debtors(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –±–æ—Ä–∂–Ω–∏–∫–∞–º.")
        return

    payments = load_data("payments", {})

    debts_by_user = {}
    for p in payments.values():
        if not p.get("paid", False):
            uid = p["user_id"]
            debts_by_user.setdefault(uid, []).append(p)

    notified_count = 0

    for uid, debts in debts_by_user.items():
        lines = []
        for d in debts:
            lines.append(f"‚Ä¢ {d['training_datetime']}: {d['amount']} –≥—Ä–Ω")

        message = (
                "üì¢ –£ —Ç–µ–±–µ —î –Ω–µ–æ–ø–ª–∞—á–µ–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:\n\n" +
                "\n".join(lines) +
                "\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É /pay_debt —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É –∞–±–æ –æ–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ Telegram."
        )

        try:
            await context.bot.send_message(chat_id=int(uid), text=message)
            notified_count += 1
        except Exception as e:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ {uid}: {e}")

    await update.message.reply_text(f"‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {notified_count} –±–æ—Ä–∂–Ω–∏–∫–∞–º.")


def setup_admin_handlers(app):
    # Admin: /send_message
    app.add_handler(CommandHandler("send_message", send_message_command))
    app.add_handler(CallbackQueryHandler(handle_send_message_team_selection, pattern=r"^send_team_"))
    # Admin: /notify_debtors
    app.add_handler(CommandHandler("notify_debtors", notify_debtors))
    # Handle message input (must be last text handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_send_message_input))
