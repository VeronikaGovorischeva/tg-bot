import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, CommandHandler, MessageHandler, filters
from data import load_data
from validation import ADMIN_IDS

SEND_MESSAGE_STATE = {}


async def send_message_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ß–æ–ª–æ–≤—ñ—á–∞ –∫–æ–º–∞–Ω–¥–∞", callback_data="send_team_Male"),
            InlineKeyboardButton("–ñ—ñ–Ω–æ—á–∞ –∫–æ–º–∞–Ω–¥–∞", callback_data="send_team_Female"),
        ],
        [InlineKeyboardButton("–û–±–∏–¥–≤—ñ –∫–æ–º–∞–Ω–¥–∏", callback_data="send_team_Both")]
    ])
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É, —è–∫—ñ–π —Ö–æ—á–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", reply_markup=keyboard)


async def handle_send_message_team_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    team = query.data.replace("send_team_", "")
    SEND_MESSAGE_STATE[query.from_user.id] = team

    await query.edit_message_text(
        f"–í–∏ –æ–±—Ä–∞–ª–∏: {team} –∫–æ–º–∞–Ω–¥–∞.\n\n–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.")


async def handle_send_message_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if update.message.text == "ü§°" or update.message.text == "üñï":
        await update.message.reply_text("ü§°")
        return
    if user_id not in SEND_MESSAGE_STATE:
        return

    team = SEND_MESSAGE_STATE.pop(user_id)
    message_text = update.message.text
    users = load_data("users")

    sender_username = update.message.from_user.username
    if sender_username:
        footer = f"\n\nüë§ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–≤(–ª–∞): @{sender_username}"
    else:
        footer = f"\n\nüë§ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–≤(–ª–∞): {update.message.from_user.first_name}"

    full_message = f"{message_text}{footer}"

    count = 0
    for uid, info in users.items():
        if team in [info.get("team"), "Both"]:
            try:
                await context.bot.send_message(chat_id=int(uid), text=full_message)
                count += 1
            except Exception as e:
                print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {uid}: {e}")

    await update.message.reply_text(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")


async def notify_debtors(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –±–æ—Ä–∂–Ω–∏–∫–∞–º.")
        return

    payments = load_data("payments", {})

    debts_by_user = {}
    for p in payments.values():
        if not p.get("paid", False):
            uid = p["user_id"]
            debts_by_user.setdefault(uid, []).append(p)

    notified_count = 0

    for uid, debts in debts_by_user.items():
        lines = []
        for d in debts:
            lines.append(f"‚Ä¢ {d['training_datetime']}: {d['amount']} –≥—Ä–Ω")

        message = (
                "üì¢ –£ —Ç–µ–±–µ —î –Ω–µ–æ–ø–ª–∞—á–µ–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:\n\n" +
                "\n".join(lines) +
                "\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É /pay_debt —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É –∞–±–æ –æ–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ Telegram."
        )

        try:
            await context.bot.send_message(chat_id=int(uid), text=message)
            notified_count += 1
        except Exception as e:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ {uid}: {e}")

    await update.message.reply_text(f"‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {notified_count} –±–æ—Ä–∂–Ω–∏–∫–∞–º.")


async def mvp_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ß–æ–ª–æ–≤—ñ—á–∞ –∫–æ–º–∞–Ω–¥–∞", callback_data="mvp_stats_Male"),
            InlineKeyboardButton("–ñ—ñ–Ω–æ—á–∞ –∫–æ–º–∞–Ω–¥–∞", callback_data="mvp_stats_Female")
        ],
        [InlineKeyboardButton("–í—Å—ñ –∫–æ–º–∞–Ω–¥–∏", callback_data="mvp_stats_Both")]
    ])

    await update.message.reply_text(
        "üèÜ MVP –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n–û–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:",
        reply_markup=keyboard
    )


async def handle_mvp_stats_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    team_filter = query.data.replace("mvp_stats_", "")
    users = load_data("users", {})

    mvp_data = []
    for user_data in users.values():
        mvp_count = int(user_data.get("mvp", 0))
        if mvp_count > 0:
            name = user_data.get("name", "–ù–µ–≤—ñ–¥–æ–º–∏–π")
            team = user_data.get("team")

            if team_filter == "Both" or team == team_filter:
                mvp_data.append((name, team, mvp_count))

    mvp_data.sort(key=lambda x: x[2], reverse=True)

    if team_filter == "Both":
        message = "üèÜ MVP –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–≤—Å—ñ –∫–æ–º–∞–Ω–¥–∏):\n\n"

        male_players = [(name, count) for name, team, count in mvp_data if team == "Male"]
        female_players = [(name, count) for name, team, count in mvp_data if team == "Female"]

        if male_players:
            message += "–ß–æ–ª–æ–≤—ñ—á–∞ –∫–æ–º–∞–Ω–¥–∞:\n"
            for name, count in male_players:
                message += f"‚Ä¢ {name}: {count} MVP\n"
            message += "\n"

        if female_players:
            message += "–ñ—ñ–Ω–æ—á–∞ –∫–æ–º–∞–Ω–¥–∞:\n"
            for name, count in female_players:
                message += f"‚Ä¢ {name}: {count} MVP\n"

    else:
        team_name = "—á–æ–ª–æ–≤—ñ—á–æ—ó" if team_filter == "Male" else "–∂—ñ–Ω–æ—á–æ—ó"
        team_emoji = "üë®" if team_filter == "Male" else "üë©"
        message = f"üèÜ MVP –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {team_emoji} {team_name} –∫–æ–º–∞–Ω–¥–∏:\n\n"

        if mvp_data:
            for name, team, count in mvp_data:
                message += f"‚Ä¢ {name}: {count} MVP\n"
        else:
            message += f"–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î MVP –Ω–∞–≥–æ—Ä–æ–¥ —É {team_name} –∫–æ–º–∞–Ω–¥–∏."

    if not mvp_data:
        message = "üèÜ MVP –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î MVP –Ω–∞–≥–æ—Ä–æ–¥."

    await query.edit_message_text(message)


async def attendance_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ß–æ–ª–æ–≤—ñ—á–∞ –∫–æ–º–∞–Ω–¥–∞", callback_data="attendance_stats_Male"),
            InlineKeyboardButton("–ñ—ñ–Ω–æ—á–∞ –∫–æ–º–∞–Ω–¥–∞", callback_data="attendance_stats_Female")
        ],
        [InlineKeyboardButton("–í—Å—ñ –∫–æ–º–∞–Ω–¥–∏", callback_data="attendance_stats_Both")]
    ])

    await update.message.reply_text(
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–æ—Å—Ç—ñ\n\n–û–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:",
        reply_markup=keyboard
    )


async def handle_attendance_stats_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    team_filter = query.data.replace("attendance_stats_", "")
    users = load_data("users", {})

    attendance_data = []
    for user_data in users.values():
        team = user_data.get("team")

        if team_filter == "Both" or team == team_filter:
            name = user_data.get("name", "–ù–µ–≤—ñ–¥–æ–º–∏–π")
            training_att = user_data.get("training_attendance", {"attended": 0, "total": 0, "percentage": 0.0})
            game_att = user_data.get("game_attendance", {"attended": 0, "total": 0, "percentage": 0.0})

            attendance_data.append((name, team, training_att, game_att))

    attendance_data.sort(key=lambda x: x[0])

    if team_filter == "Both":
        message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–æ—Å—Ç—ñ (–≤—Å—ñ –∫–æ–º–∞–Ω–¥–∏):\n\n"
    else:
        team_name = "—á–æ–ª–æ–≤—ñ—á–æ—ó" if team_filter == "Male" else "–∂—ñ–Ω–æ—á–æ—ó"
        message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–æ—Å—Ç—ñ {team_name} –∫–æ–º–∞–Ω–¥–∏:\n\n"

    if attendance_data:
        for name, team, training_att, game_att in attendance_data:
            team_emoji = "üë®" if team == "Male" else "üë©"
            message += f"{team_emoji} {name}:\n"
            message += f"  üèê –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {training_att['attended']}/{training_att['total']} ({training_att['percentage']}%)\n"
            message += f"  üèÜ –Ü–≥—Ä–∏: {game_att['attended']}/{game_att['total']} ({game_att['percentage']}%)\n\n"
    else:
        message += "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å."

    await query.edit_message_text(message)


async def training_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ß–æ–ª–æ–≤—ñ—á–∞ –∫–æ–º–∞–Ω–¥–∞", callback_data="training_stats_Male"),
            InlineKeyboardButton("–ñ—ñ–Ω–æ—á–∞ –∫–æ–º–∞–Ω–¥–∞", callback_data="training_stats_Female")
        ],
        [InlineKeyboardButton("–í—Å—ñ –∫–æ–º–∞–Ω–¥–∏", callback_data="training_stats_Both")]
    ])

    await update.message.reply_text(
        "üèê –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–æ—Å—Ç—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å\n\n–û–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:",
        reply_markup=keyboard
    )


async def handle_training_stats_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    team_filter = query.data.replace("training_stats_", "")
    users = load_data("users", {})

    training_data = []
    for user_data in users.values():
        team = user_data.get("team")

        if team_filter == "Both" or team == team_filter:
            name = user_data.get("name", "–ù–µ–≤—ñ–¥–æ–º–∏–π")
            training_att = user_data.get("training_attendance", {"attended": 0, "total": 0, "percentage": 0.0})

            if training_att["total"] > 0:
                training_data.append((name, team, training_att))

    training_data.sort(key=lambda x: x[2]["percentage"], reverse=True)

    if team_filter == "Both":
        message = "üèê –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–æ—Å—Ç—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å (–≤—Å—ñ –∫–æ–º–∞–Ω–¥–∏):\n\n"
    else:
        team_name = "—á–æ–ª–æ–≤—ñ—á–æ—ó" if team_filter == "Male" else "–∂—ñ–Ω–æ—á–æ—ó"
        message = f"üèê –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–æ—Å—Ç—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å {team_name} –∫–æ–º–∞–Ω–¥–∏:\n\n"

    if training_data:
        for i, (name, team, training_att) in enumerate(training_data, 1):
            message += f"{i}. {name}: {training_att['attended']}/{training_att['total']} ({training_att['percentage']}%)\n"
    else:
        message += "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å."

    await query.edit_message_text(message)


async def game_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ß–æ–ª–æ–≤—ñ—á–∞ –∫–æ–º–∞–Ω–¥–∞", callback_data="game_stats_Male"),
            InlineKeyboardButton("–ñ—ñ–Ω–æ—á–∞ –∫–æ–º–∞–Ω–¥–∞", callback_data="game_stats_Female")
        ],
        [InlineKeyboardButton("–í—Å—ñ –∫–æ–º–∞–Ω–¥–∏", callback_data="game_stats_Both")]
    ])

    await update.message.reply_text(
        "üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–æ—Å—Ç—ñ —ñ–≥–æ—Ä\n\n–û–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:",
        reply_markup=keyboard
    )


async def handle_game_stats_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    team_filter = query.data.replace("game_stats_", "")
    users = load_data("users", {})

    game_data = []
    for user_data in users.values():
        team = user_data.get("team")

        if team_filter == "Both" or team == team_filter:
            name = user_data.get("name", "–ù–µ–≤—ñ–¥–æ–º–∏–π")
            game_att = user_data.get("game_attendance", {"attended": 0, "total": 0, "percentage": 0.0})

            if game_att["total"] > 0:
                game_data.append((name, team, game_att))

    game_data.sort(key=lambda x: x[2]["percentage"], reverse=True)

    if team_filter == "Both":
        message = "üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–æ—Å—Ç—ñ —ñ–≥–æ—Ä (–≤—Å—ñ –∫–æ–º–∞–Ω–¥–∏):\n\n"
    else:
        team_name = "—á–æ–ª–æ–≤—ñ—á–æ—ó" if team_filter == "Male" else "–∂—ñ–Ω–æ—á–æ—ó"
        message = f"üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–æ—Å—Ç—ñ —ñ–≥–æ—Ä {team_name} –∫–æ–º–∞–Ω–¥–∏:\n\n"

    if game_data:
        for i, (name, team, game_att) in enumerate(game_data, 1):
            message += f"{i}. {name}: {game_att['attended']}/{game_att['total']} ({game_att['percentage']}%)\n"
    else:
        message += "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å —ñ–≥–æ—Ä."

    await query.edit_message_text(message)


async def my_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    users = load_data("users", {})

    if user_id not in users:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Å–ø–æ—á–∞—Ç–∫—É.")
        return

    user_data = users[user_id]
    name = user_data.get("name", "–ù–µ–≤—ñ–¥–æ–º–∏–π")
    team = user_data.get("team", "–ù–µ–≤—ñ–¥–æ–º–æ")
    mvp = user_data.get("mvp", 0)

    default_attendance = {"attended": 0, "total": 0, "percentage": 0.0}
    training_att = user_data.get("training_attendance", default_attendance)
    game_att = user_data.get("game_attendance", default_attendance)

    team_name = "—á–æ–ª–æ–≤—ñ—á–æ—ó" if team == "Male" else "–∂—ñ–Ω–æ—á–æ—ó" if team == "Female" else "–∑–º—ñ—à–∞–Ω–æ—ó"

    message = f"üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
    message += f"{name} ({team_name} –∫–æ–º–∞–Ω–¥–∞)\n\n"

    message += f"üèê –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:\n"
    message += f"   –í—ñ–¥–≤—ñ–¥–∞–≤: {training_att['attended']}/{training_att['total']}\n"
    message += f"   –í—ñ–¥—Å–æ—Ç–æ–∫: {training_att['percentage']}%\n\n"

    message += f"üèÜ –Ü–≥—Ä–∏:\n"
    message += f"   –í—ñ–¥–≤—ñ–¥–∞–≤: {game_att['attended']}/{game_att['total']}\n"
    message += f"   –í—ñ–¥—Å–æ—Ç–æ–∫: {game_att['percentage']}%\n\n"

    message += f"üéñÔ∏è MVP –Ω–∞–≥–æ—Ä–æ–¥–∏: {mvp}\n\n"

    if training_att["total"] > 0 and training_att["percentage"] >= 90:
        message += "üî• –í—ñ–¥–º—ñ–Ω–Ω–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å!"
    elif training_att["total"] > 0 and training_att["percentage"] >= 70:
        message += "üí™ –ì–∞—Ä–Ω–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å!"
    elif training_att["total"] > 0:
        message += "üìà –¢—Ä–µ–±–∞ —á–∞—Å—Ç—ñ—à–µ —Ö–æ–¥–∏—Ç–∏ –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è!"

    await update.message.reply_text(message)


async def game_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ß–æ–ª–æ–≤—ñ—á–∞ –∫–æ–º–∞–Ω–¥–∞", callback_data="game_results_Male"),
            InlineKeyboardButton("–ñ—ñ–Ω–æ—á–∞ –∫–æ–º–∞–Ω–¥–∞", callback_data="game_results_Female")
        ]
    ])

    await update.message.reply_text(
        "üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —ñ–≥–æ—Ä\n\n–û–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:",
        reply_markup=keyboard
    )


async def handle_game_results_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    team_filter = query.data.replace("game_results_", "")
    games = load_data("games", {})

    now = datetime.datetime.now()

    completed_games = []
    for game_id, game in games.items():
        if game.get("team") not in [team_filter, "Both"]:
            continue
        try:
            game_datetime = datetime.datetime.strptime(f"{game['date']} {game['time']}", "%d.%m.%Y %H:%M")
            result = game.get("result", {})
            if game_datetime < now and result.get("status") is not None:
                completed_games.append((game_id, game, game_datetime))
        except ValueError:
            continue

    completed_games.sort(key=lambda x: x[2], reverse=True)

    if not completed_games:
        team_name = "—á–æ–ª–æ–≤—ñ—á–æ—ó" if team_filter == "Male" else "–∂—ñ–Ω–æ—á–æ—ó"
        await query.edit_message_text(
            f"üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —ñ–≥–æ—Ä {team_name} –∫–æ–º–∞–Ω–¥–∏:\n\n–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö —ñ–≥–æ—Ä –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.")
        return

    team_name = "—á–æ–ª–æ–≤—ñ—á–æ—ó" if team_filter == "Male" else "–∂—ñ–Ω–æ—á–æ—ó"
    message = f"üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —ñ–≥–æ—Ä {team_name} –∫–æ–º–∞–Ω–¥–∏:\n\n"

    type_names = {
        "friendly": "–¢–æ–≤–∞—Ä–∏—Å—å–∫–∞",
        "stolichka": "–°—Ç–æ–ª–∏—á–∫–∞",
        "universiad": "–£–Ω—ñ–≤–µ—Ä—Å—ñ–∞–¥–∞"
    }

    for game_id, game, game_datetime in completed_games:
        result = game["result"]
        type_name = type_names.get(game["type"], game["type"])

        if result["status"] == "win":
            result_emoji = "üü¢"
        elif result["status"] == "loss":
            result_emoji = "üî¥"
        else:
            result_emoji = "üü°"

        message += f"{result_emoji} {type_name} - {game['date']}\n"
        message += f"   –ü—Ä–æ—Ç–∏: {game['opponent']}\n"
        message += f"   –†–∞—Ö—É–Ω–æ–∫: {result['our_score']}:{result['opponent_score']}\n"

        if result.get("sets"):
            sets_text = ", ".join([f"{s['our']}:{s['opponent']}" for s in result["sets"]])
            message += f"   –°–µ—Ç–∏: {sets_text}\n"

        message += "\n"

    wins = sum(1 for _, game, _ in completed_games if game["result"]["status"] == "win")
    losses = sum(1 for _, game, _ in completed_games if game["result"]["status"] == "loss")

    message += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {wins} –ø–µ—Ä–µ–º–æ–≥, {losses} –ø–æ—Ä–∞–∑–æ–∫"

    if len(message) > 4000:
        parts = [message[i:i + 4000] for i in range(0, len(message), 4000)]
        for part in parts:
            await query.message.reply_text(part)
        await query.delete_message()
    else:
        await query.edit_message_text(message)


def setup_admin_handlers(app):
    # /mvp_stats
    app.add_handler(CommandHandler("mvp_stats", mvp_stats))
    # /my_stats
    app.add_handler(CommandHandler("my_stats", my_stats))
    # /training_stats
    app.add_handler(CommandHandler("training_stats", training_stats))
    # /game_stats
    app.add_handler(CommandHandler("game_stats", game_stats))
    # /game_results
    app.add_handler(CommandHandler("game_results", game_results))
    # Buttons
    app.add_handler(CallbackQueryHandler(handle_game_results_selection, pattern=r"^game_results_"))
    app.add_handler(CallbackQueryHandler(handle_training_stats_selection, pattern=r"^training_stats_"))
    app.add_handler(CallbackQueryHandler(handle_game_stats_selection, pattern=r"^game_stats_"))
    app.add_handler(CallbackQueryHandler(handle_mvp_stats_selection, pattern=r"^mvp_stats_"))
    # Admin: /send_message
    app.add_handler(CommandHandler("send_message", send_message_command))
    app.add_handler(CallbackQueryHandler(handle_send_message_team_selection, pattern=r"^send_team_"))
    # Admin: /notify_debtors
    app.add_handler(CommandHandler("notify_debtors", notify_debtors))
    # Handle message input (must be last text handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_send_message_input))
