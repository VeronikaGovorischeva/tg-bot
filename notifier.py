import asyncio
from datetime import datetime
from data import load_data
from config import JSON_FILE
from telegram.ext import Application

ONE_TIME_TRAININGS_FILE = "data/one_time_trainings.json"
CONSTANT_TRAININGS_FILE = "data/constant_trainings.json"

async def check_voting_and_notify(app: Application):
    users = load_data(JSON_FILE)
    today = datetime.today().date()
    weekday = today.weekday()
    weekday_names = ['–ø–æ–Ω–µ–¥—ñ–ª–æ–∫', '–≤—ñ–≤—Ç–æ—Ä–æ–∫', '—Å–µ—Ä–µ–¥—É', '—á–µ—Ç–≤–µ—Ä', "–ø'—è—Ç–Ω–∏—Ü—é", '—Å—É–±–æ—Ç—É', '–Ω–µ–¥—ñ–ª—é']

    one_time_trainings = load_data(ONE_TIME_TRAININGS_FILE, {})
    constant_trainings = load_data(CONSTANT_TRAININGS_FILE, {})

    # Notify for one-time trainings
    for training in one_time_trainings.values():
        if training.get("start_voting") != today.strftime("%d.%m.%Y"):
            continue

        for uid, info in users.items():
            if info.get("team") in [training.get("team"), "Both"]:
                try:
                    await app.bot.send_message(
                        chat_id=int(uid),
                        text=f"üó≥ –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏—Ç–µ –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è {training['date']} –∑ {training['start_hour']:02d}:{training['start_min']:02d}. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /vote_training"
                    )
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è {uid}: {e}")

    # Notify for constant trainings
    for training in constant_trainings.values():
        if weekday_names[int(training.get("start_voting"))] != weekday:
            continue

        for uid, info in users.items():
            if info.get("team") in [training.get("team"), "Both"]:
                try:
                    print("üì§ –Ω–∞–¥—Å–∏–ª–∞—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è {uid}")
                    await app.bot.send_message(...)
                except Exception as e:
                    print("‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è: {e}")


async def schedule_notifications(app: Application):
    while True:
        await check_voting_and_notify(app)
        await asyncio.sleep(24 * 3600)  # —Ä–∞–∑ –Ω–∞ –¥–æ–±—É


async def check_time(update, context):
    await check_voting_and_notify(context.application)
    await update.message.reply_text("‚úÖ –ß–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ. –Ø–∫—â–æ –Ω–∞—Å—Ç–∞–≤ –º–æ–º–µ–Ω—Ç –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è ‚Äî –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —Å–ø–æ–≤—ñ—â–µ–Ω—ñ.")
