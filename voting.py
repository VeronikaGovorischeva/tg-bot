import datetime
import uuid
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler, MessageHandler, \
    filters, ConversationHandler

from data import load_data, save_data
from validation import is_authorized

VOTE_TYPE, VOTE_QUESTION, VOTE_OPTIONS, VOTE_TEAM = range(200, 204)
VOTE_OTHER_NAME, VOTE_OTHER_SELECT = range(2)
WEEKDAYS = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü'—è—Ç–Ω–∏—Ü—è", "–°—É–±–æ—Ç–∞", "–ù–µ–¥—ñ–ª—è"]
VOTES_FILE = "training_votes"
REGISTRATION_FILE = "users"
TRAINING_VOTES_FILE = "votes"
GENERAL_FILE = "general"
GENERAL_VOTES_FILE = "general_votes"
GAMES_FILE = "games"
GAME_VOTES_FILE = "game_votes"
DEFAULT_VOTES_STRUCTURE = {"votes": {}}
VOTES_LIMIT = 14
ONE_TIME_TRAININGS_FILE = "one_time_trainings"
CONSTANT_TRAININGS_FILE = "constant_trainings"


class VoteType:
    YES_NO = "yes_no"
    MULTIPLE_CHOICE_SINGLE = "multiple_choice_single"
    MULTIPLE_CHOICE_MULTI = "multiple_choice_multi"
    TEXT_RESPONSE = "text_response"


class VoteManager:
    def __init__(self):
        self.vote_types = {
            VoteType.YES_NO: "–¢–∞–∫/–ù—ñ",
            VoteType.MULTIPLE_CHOICE_SINGLE: "–ú–Ω–æ–∂–∏–Ω–Ω–∏–π –≤–∏–±—ñ—Ä (1 –≤—ñ–¥–ø–æ–≤—ñ–¥—å)",
            VoteType.MULTIPLE_CHOICE_MULTI: "–ú–Ω–æ–∂–∏–Ω–Ω–∏–π –≤–∏–±—ñ—Ä (–±–∞–≥–∞—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π)",
            VoteType.TEXT_RESPONSE: "–¢–µ–∫—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"
        }

    def add_vote_type_keyboard(self):
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("–¢–∞–∫/–ù—ñ", callback_data=f"vote_type_{VoteType.YES_NO}")],
            [InlineKeyboardButton("–ú–Ω–æ–∂–∏–Ω–Ω–∏–π –≤–∏–±—ñ—Ä (1 –≤—ñ–¥–ø–æ–≤—ñ–¥—å)",
                                  callback_data=f"vote_type_{VoteType.MULTIPLE_CHOICE_SINGLE}")],
            [InlineKeyboardButton("–ú–Ω–æ–∂–∏–Ω–Ω–∏–π –≤–∏–±—ñ—Ä (–±–∞–≥–∞—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π)",
                                  callback_data=f"vote_type_{VoteType.MULTIPLE_CHOICE_MULTI}")],
            [InlineKeyboardButton("–¢–µ–∫—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å", callback_data=f"vote_type_{VoteType.TEXT_RESPONSE}")]
        ])

    def create_team_selection_keyboard(self):
        return InlineKeyboardMarkup([
            [
                InlineKeyboardButton("–ß–æ–ª–æ–≤—ñ—á–∞", callback_data="general_vote_team_Male"),
                InlineKeyboardButton("–ñ—ñ–Ω–æ—á–∞", callback_data="general_vote_team_Female")
            ],
            [InlineKeyboardButton("–û–±–∏–¥–≤—ñ –∫–æ–º–∞–Ω–¥–∏", callback_data="general_vote_team_Both")]
        ])


vote_manager = VoteManager()


class UnifiedVoteManager:
    def __init__(self):
        self.vote_types = {
            "training": "üèê –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è",
            "game": "üèÜ –ì—Ä–∞",
            "general": "üìä –ó–∞–≥–∞–ª—å–Ω–µ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è"
        }

    def get_all_available_votes(self, user_id: str, user_team: str):
        all_votes = []

        training_votes = self._get_training_votes(user_id, user_team)
        all_votes.extend(training_votes)

        game_votes = self._get_game_votes(user_id, user_team)
        all_votes.extend(game_votes)

        general_votes = self._get_general_votes(user_id, user_team)
        all_votes.extend(general_votes)

        return all_votes

    def _get_training_votes(self, user_id: str, user_team: str):
        one_time_trainings = load_data(ONE_TIME_TRAININGS_FILE, {})
        constant_trainings = load_data(CONSTANT_TRAININGS_FILE, {})

        training_votes = []
        votes_data = load_data(TRAINING_VOTES_FILE, DEFAULT_VOTES_STRUCTURE)

        for training_id, training in one_time_trainings.items():
            if training.get("team") not in [user_team, "Both"]:
                continue

            if not training.get("voting_opened", False):
                continue

            vote_id = f"{training['date']}_{training['start_hour']:02d}:{training['start_min']:02d}"

            yes_votes = 0
            if vote_id in votes_data["votes"]:
                yes_votes = sum(1 for v in votes_data["votes"][vote_id].values() if v["vote"] == "yes")

            if yes_votes < VOTES_LIMIT:
                label = self._format_training_label(training, vote_id)
                training_votes.append({
                    "type": "training",
                    "id": vote_id,
                    "label": label,
                    "data": training
                })

        for training_id, training in constant_trainings.items():
            if training.get("team") not in [user_team, "Both"]:
                continue

            if not training.get("voting_opened", False):
                continue

            vote_id = f"const_{training['weekday']}_{training['start_hour']:02d}:{training['start_min']:02d}"

            yes_votes = 0
            if vote_id in votes_data["votes"]:
                yes_votes = sum(1 for v in votes_data["votes"][vote_id].values() if v["vote"] == "yes")

            if yes_votes < VOTES_LIMIT:
                label = self._format_training_label(training, vote_id)
                training_votes.append({
                    "type": "training",
                    "id": vote_id,
                    "label": label,
                    "data": training
                })

        return training_votes

    def _get_game_votes(self, user_id: str, user_team: str):
        games = load_data(GAMES_FILE, {})
        now = datetime.datetime.now()
        game_votes = []

        for game in games.values():
            if game.get("team") not in [user_team, "Both"]:
                continue

            try:
                game_datetime = datetime.datetime.strptime(f"{game['date']} {game['time']}", "%d.%m.%Y %H:%M")
                if game_datetime > now:
                    game_id = game['id']
                    label = self._format_game_label(game)
                    game_votes.append({
                        "type": "game",
                        "id": game_id,
                        "label": label,
                        "data": game
                    })
            except ValueError:
                continue

        return game_votes

    def _get_general_votes(self, user_id: str, user_team: str):
        votes = load_data(GENERAL_FILE, {})
        general_votes = []

        for vote_id, vote_data in votes.items():
            if not vote_data.get("is_active", True):
                continue

            if vote_data.get("team") not in [user_team, "Both"]:
                continue

            label = f"üìä {vote_data['question'][:50]}{'...' if len(vote_data['question']) > 50 else ''}"
            general_votes.append({
                "type": "general",
                "id": vote_id,
                "label": label,
                "data": vote_data
            })

        return general_votes

    def _format_training_label(self, training, training_id):
        if training.get("type") == "one-time" or "const_" not in training_id:
            date_str = training.get("date", "")
        else:
            weekday = training.get("weekday", 0)
            date_str = WEEKDAYS[weekday] if 0 <= weekday < len(WEEKDAYS) else "–ù–µ–≤—ñ–¥–æ–º–æ"

        time_str = f"{training['start_hour']:02d}:{training['start_min']:02d}"
        base_label = f"üèê {date_str} {time_str}"

        extra_info = []
        if training.get("with_coach"):
            extra_info.append("–ó —Ç—Ä–µ–Ω–µ—Ä–æ–º")

        location = training.get("location", "")
        if location and location.lower() != "–Ω–∞—É–∫–º–∞" and not location.startswith("http"):
            if "(" in location and "http" in location:
                clean_location = location.split("(")[0].strip()
                if clean_location and clean_location.lower() != "–Ω–∞—É–∫–º–∞":
                    extra_info.append(clean_location)
            extra_info.append(location)

        description = training.get("description", "")
        if description:
            extra_info.append(description)

        if extra_info:
            base_label += f" ({' - '.join(extra_info)})"

        return base_label

    def _format_game_label(self, game):
        type_names = {
            "friendly": "–¢–æ–≤–∞—Ä–∏—Å—å–∫–∏–π –º–∞—Ç—á",
            "tournament": "–¢—É—Ä–Ω—ñ—Ä",
            "league": "–ß–µ–º–ø—ñ–æ–Ω–∞—Ç/–õ—ñ–≥–∞",
            "training_match": "–¢—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏–π –º–∞—Ç—á"
        }

        type_name = type_names.get(game.get('type'), game.get('type', '–ì—Ä–∞'))
        label = f"üèÜ {type_name} - {game['date']} {game['time']}"
        label += f" –ø—Ä–æ—Ç–∏ {game['opponent']}"

        return label


unified_vote_manager = UnifiedVoteManager()


async def unified_vote_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    user_data = load_data(REGISTRATION_FILE)

    if user_id not in user_data or "team" not in user_data[user_id]:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –ø–µ—Ä–µ–¥ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è–º.")
        return

    payments = load_data("payments", {})
    unpaid = [p for p in payments.values() if p["user_id"] == user_id and not p.get("paid", False)]

    if len(unpaid) >= 2:
        await update.message.reply_text(
            "‚ùå –£ —Ç–µ–±–µ –¥–≤–∞ –∞–±–æ –±—ñ–ª—å—à–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å. –°–ø–æ—á–∞—Ç–∫—É –ø–æ–≥–∞—Å–∏ –±–æ—Ä–≥ —á–µ—Ä–µ–∑ /pay_debt.")
        return
    elif len(unpaid) == 1:
        await update.message.reply_text(
            "‚ö†Ô∏è –£ —Ç–µ–±–µ —î –Ω–µ–æ–ø–ª–∞—á–µ–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≥–∞—Å–∏ –±–æ—Ä–≥ —á–µ—Ä–µ–∑ /pay_debt —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ.")

    user_team = user_data[user_id]["team"]
    all_votes = unified_vote_manager.get_all_available_votes(user_id, user_team)

    if not all_votes:
        await update.message.reply_text("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥–æ–ª–æ—Å—É–≤–∞–Ω—å.")
        return

    keyboard = []
    context.user_data["unified_vote_options"] = all_votes

    for idx, vote in enumerate(all_votes):
        keyboard.append([InlineKeyboardButton(vote["label"], callback_data=f"unified_vote_{idx}")])

    await update.message.reply_text(
        "üìä –î–æ—Å—Ç—É–ø–Ω—ñ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è:\n\n–û–±–µ—Ä—ñ—Ç—å –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_unified_vote_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    idx = int(query.data.replace("unified_vote_", ""))
    vote_options = context.user_data.get("unified_vote_options", [])

    if idx >= len(vote_options):
        await query.edit_message_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –≤–∏–±—Ä–∞–Ω–µ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –±—ñ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–µ.")
        return

    selected_vote = vote_options[idx]
    vote_type = selected_vote["type"]
    vote_id = selected_vote["id"]
    vote_data = selected_vote["data"]

    if vote_type == "training":
        await handle_training_vote_interaction(query, context, vote_id, vote_data)
    elif vote_type == "game":
        await handle_game_vote_interaction(query, context, vote_id, vote_data)
    elif vote_type == "general":
        await handle_general_vote_interaction(query, context, vote_id, vote_data)


async def handle_training_vote_interaction(query, context, training_id, training_data):
    user_id = str(query.from_user.id)

    votes = load_data(TRAINING_VOTES_FILE, DEFAULT_VOTES_STRUCTURE)
    if training_id in votes["votes"]:
        yes_votes = sum(1 for v in votes["votes"][training_id].values() if v["vote"] == "yes")
        if yes_votes >= VOTES_LIMIT:
            await query.edit_message_text("‚ö†Ô∏è –î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º—É–º –≥–æ–ª–æ—Å—ñ–≤ '—Ç–∞–∫'. –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ.")
            return

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data=f"vote_yes_{training_id}"),
            InlineKeyboardButton("‚ùå –ù—ñ", callback_data=f"vote_no_{training_id}")
        ]
    ]

    training_info = format_training_id(training_id)

    current_vote = None
    if training_id in votes["votes"] and user_id in votes["votes"][training_id]:
        current_vote = votes["votes"][training_id][user_id]["vote"]

    message = f"üèê –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {training_info}\n"
    if current_vote:
        message += f"–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –≥–æ–ª–æ—Å: {'–ë–£–î–£' if current_vote == 'yes' else '–ù–ï –ë–£–î–£'}\n"
    message += "–ß–∏ –±—É–¥–µ—Ç–µ –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—ñ?"

    await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))


async def handle_game_vote_interaction(query, context, game_id, game_data):
    user_id = str(query.from_user.id)

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ë—É–¥—É", callback_data=f"game_vote_yes_{game_id}"),
            InlineKeyboardButton("‚ùå –ù–µ –±—É–¥—É", callback_data=f"game_vote_no_{game_id}")
        ]
    ]

    type_names = {
        "friendly": "–¢–æ–≤–∞—Ä–∏—Å—å–∫–∏–π –º–∞—Ç—á",
        "tournament": "–¢—É—Ä–Ω—ñ—Ä",
        "league": "–ß–µ–º–ø—ñ–æ–Ω–∞—Ç/–õ—ñ–≥–∞",
        "training_match": "–¢—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏–π –º–∞—Ç—á"
    }

    type_name = type_names.get(game_data.get('type'), game_data.get('type', '–ì—Ä–∞'))

    message = f"üèÜ {type_name}\n\n"
    message += f"üìÖ {game_data['date']} –æ {game_data['time']}\n"
    message += f"üèÜ –ü—Ä–æ—Ç–∏: {game_data['opponent']}\n"
    message += f"üìç –ú—ñ—Å—Ü–µ: {game_data['location']}\n\n"

    game_votes = load_data(GAME_VOTES_FILE, {"votes": {}})  # Add default structure
    if game_id in game_votes["votes"] and user_id in game_votes["votes"][game_id]:  # Add ["votes"]
        current_vote = game_votes["votes"][game_id][user_id]["vote"]  # Add ["votes"]
        message += f"–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –≥–æ–ª–æ—Å: {'–ë–£–î–£' if current_vote == 'yes' else '–ù–ï –ë–£–î–£'}\n"

    message += "–ß–∏ –±—É–¥–µ—Ç–µ –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å —É —Ü—ñ–π –≥—Ä—ñ?"

    await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))


async def handle_general_vote_interaction(query, context, vote_id, vote_data):
    user_id = str(query.from_user.id)

    if vote_data["type"] == "yes_no":
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data=f"general_vote_{vote_id}_yes"),
                InlineKeyboardButton("‚ùå –ù—ñ", callback_data=f"general_vote_{vote_id}_no")
            ]
        ])
    elif vote_data["type"] in ["multiple_choice_single", "multiple_choice_multi"]:
        buttons = []
        for i, option in enumerate(vote_data["options"]):
            buttons.append([InlineKeyboardButton(
                f"{i + 1}. {option}",
                callback_data=f"general_vote_{vote_id}_option_{i}"
            )])

        if vote_data["type"] == "multiple_choice_multi":
            buttons.append(
                [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data=f"general_vote_{vote_id}_confirm")])

        keyboard = InlineKeyboardMarkup(buttons)
    else:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìù –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"general_vote_{vote_id}_text")]
        ])

    message = f"üìä {vote_data['question']}\n\n"

    if vote_data["type"] == "text_response":
        message += "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å."
    elif vote_data["type"] == "multiple_choice_multi":
        message += "–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∞–±–æ –∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤, –ø–æ—Ç—ñ–º –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–±—ñ—Ä':"
    else:
        message += "–û–±–µ—Ä—ñ—Ç—å –≤–∞—à –≤–∞—Ä—ñ–∞–Ω—Ç:"

    responses = load_data(GENERAL_VOTES_FILE, {"votes": {}})
    if vote_id in responses["votes"] and user_id in responses["votes"][vote_id]:
        current_response = responses["votes"][vote_id][user_id]["response"]
        message += f"\n\n–í–∞—à–∞ –ø–æ—Ç–æ—á–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {current_response}"

    await query.edit_message_text(message, reply_markup=keyboard)


def format_training_id(tid: str) -> str:
    if tid.startswith("const_"):
        try:
            parts = tid.split("_")
            weekday_index = int(parts[1])
            time_str = parts[2]
            return f"{WEEKDAYS[weekday_index]} –æ {time_str}"
        except:
            return tid
    else:
        try:
            return f"{tid[:10]} –æ {tid[11:]}"
        except:
            return tid


async def add_vote(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not is_authorized(update.message.from_user.id):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ—Å—É–≤–∞–Ω—å.")
        return ConversationHandler.END

    await update.message.reply_text(
        "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è:",
        reply_markup=vote_manager.add_vote_type_keyboard()
    )
    return VOTE_TYPE


async def handle_vote_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    vote_type = query.data.replace("vote_type_", "")
    context.user_data['general_vote_type'] = vote_type

    await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è:")
    return VOTE_QUESTION


async def handle_vote_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    question = update.message.text
    context.user_data['general_vote_question'] = question

    vote_type = context.user_data['general_vote_type']

    if vote_type in [VoteType.MULTIPLE_CHOICE_SINGLE, VoteType.MULTIPLE_CHOICE_MULTI]:
        await update.message.reply_text(
            "–í–≤–µ–¥—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (–∫–æ–∂–µ–Ω –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞, –º–∞–∫—Å–∏–º—É–º 5 –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤):\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥:\n"
            "–í–∞—Ä—ñ–∞–Ω—Ç 1\n"
            "–í–∞—Ä—ñ–∞–Ω—Ç 2\n"
            "–í–∞—Ä—ñ–∞–Ω—Ç 3"
        )
        return VOTE_OPTIONS
    else:
        context.user_data['general_vote_options'] = []
        await update.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å –¥–ª—è —è–∫–æ—ó –∫–æ–º–∞–Ω–¥–∏ —Ü–µ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è:",
            reply_markup=vote_manager.create_team_selection_keyboard()
        )
        return VOTE_TEAM


async def handle_vote_options(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    options_text = update.message.text
    options = [opt.strip() for opt in options_text.split('\n') if opt.strip()]

    if len(options) < 2:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 2 –≤–∞—Ä—ñ–∞–Ω—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        return VOTE_OPTIONS

    if len(options) > 5:
        await update.message.reply_text(
            "‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 5 –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        return VOTE_OPTIONS

    context.user_data['general_vote_options'] = options

    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å –¥–ª—è —è–∫–æ—ó –∫–æ–º–∞–Ω–¥–∏ —Ü–µ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è:",
        reply_markup=vote_manager.create_team_selection_keyboard()
    )
    return VOTE_TEAM


async def handle_vote_team(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    team = query.data.replace("general_vote_team_", "")

    votes = load_data(GENERAL_FILE, {})
    if votes:
        vote_id = str(max(int(k) for k in votes.keys()) + 1)
    else:
        vote_id = "1"

    vote_data = {
        "vote_id": vote_id,
        "question": context.user_data['general_vote_question'],
        "type": context.user_data['general_vote_type'],
        "options": context.user_data.get('general_vote_options', []),
        "team": team,
        "creator_id": str(query.from_user.id),
        "is_active": True
    }

    votes[vote_id] = vote_data
    save_data(votes, GENERAL_FILE)

    await send_vote_to_users(context, vote_data, vote_id)

    team_display = {"Male": "—á–æ–ª–æ–≤—ñ—á–æ—ó –∫–æ–º–∞–Ω–¥–∏", "Female": "–∂—ñ–Ω–æ—á–æ—ó –∫–æ–º–∞–Ω–¥–∏", "Both": "–æ–±–æ—Ö –∫–æ–º–∞–Ω–¥"}[team]

    await query.edit_message_text(
        f"‚úÖ –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n"
        f"–ü–∏—Ç–∞–Ω–Ω—è: {vote_data['question']}\n"
        f"–ö–æ–º–∞–Ω–¥–∞: {team_display}\n\n"
        f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É—á–∞—Å–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥–∏.\n\n"
    )

    return ConversationHandler.END


async def send_vote_to_users(context: ContextTypes.DEFAULT_TYPE, vote_data: dict, vote_id: str):
    users = load_data("users", {})

    if vote_data["type"] == VoteType.YES_NO:
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data=f"general_vote_{vote_id}_yes"),
                InlineKeyboardButton("‚ùå –ù—ñ", callback_data=f"general_vote_{vote_id}_no")
            ]
        ])
    elif vote_data["type"] in [VoteType.MULTIPLE_CHOICE_SINGLE, VoteType.MULTIPLE_CHOICE_MULTI]:
        buttons = []
        for i, option in enumerate(vote_data["options"]):
            buttons.append([InlineKeyboardButton(
                f"{i + 1}. {option}",
                callback_data=f"general_vote_{vote_id}_option_{i}"
            )])

        if vote_data["type"] == VoteType.MULTIPLE_CHOICE_MULTI:
            buttons.append(
                [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data=f"general_vote_{vote_id}_confirm")])

        keyboard = InlineKeyboardMarkup(buttons)
    else:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìù –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"general_vote_{vote_id}_text")]
        ])

    message = f"üìä –ù–æ–≤–µ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è!\n\n"
    message += f"‚ùì {vote_data['question']}\n\n"

    if vote_data["type"] == VoteType.TEXT_RESPONSE:
        message += "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å."
    elif vote_data["type"] == VoteType.MULTIPLE_CHOICE_MULTI:
        message += "–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∞–±–æ –∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤, –ø–æ—Ç—ñ–º –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–±—ñ—Ä':"
    else:
        message += "–û–±–µ—Ä—ñ—Ç—å –≤–∞—à –≤–∞—Ä—ñ–∞–Ω—Ç:"

    count = 0
    for uid, user_info in users.items():
        if vote_data["team"] in [user_info.get("team"), "Both"]:
            try:
                await context.bot.send_message(
                    chat_id=int(uid),
                    text=message,
                    reply_markup=keyboard
                )
                count += 1
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –¥–æ {uid}: {e}")

    return count


async def handle_general_vote_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data_parts = query.data.split("_")
    vote_id = data_parts[2]
    response_type = data_parts[3]

    user_id = str(query.from_user.id)
    users = load_data("users", {})
    user_name = users.get(user_id, {}).get("name", "–ù–µ–≤—ñ–¥–æ–º–∏–π")

    votes = load_data(GENERAL_FILE, {})
    if vote_id not in votes:
        await query.edit_message_text("‚ö†Ô∏è –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    vote_data = votes[vote_id]

    if not vote_data.get("is_active", True):
        await query.edit_message_text("‚ö†Ô∏è –¶–µ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤–∂–µ –∑–∞–∫—Ä–∏—Ç–æ.")
        return

    responses = load_data(GENERAL_VOTES_FILE, {"votes": {}})
    if vote_id not in responses["votes"]:
        responses["votes"][vote_id] = {}

    if response_type == "text":
        context.user_data[f"text_vote_{vote_id}"] = True
        await query.edit_message_text(
            f"–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è:\n\n{vote_data['question']}"
        )
        return

    elif response_type in ["yes", "no"]:
        response_value = "–¢–∞–∫" if response_type == "yes" else "–ù—ñ"

        responses["votes"][vote_id][user_id] = {
            "name": user_name,
            "response": response_value,
        }
        save_data(responses, GENERAL_VOTES_FILE)

        await query.edit_message_text(f"‚úÖ –í–∞—à –≥–æ–ª–æ—Å '{response_value}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")

    elif response_type == "option":
        option_index = int(data_parts[4])
        option_value = vote_data["options"][option_index]

        if vote_data["type"] == VoteType.MULTIPLE_CHOICE_SINGLE:
            responses["votes"][vote_id][user_id] = {
                "name": user_name,
                "response": option_value,
            }
            save_data(responses, GENERAL_VOTES_FILE)
            await query.edit_message_text(f"‚úÖ –í–∞—à –≤–∏–±—ñ—Ä '{option_value}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")

        elif vote_data["type"] == VoteType.MULTIPLE_CHOICE_MULTI:
            if f"multi_vote_{vote_id}" not in context.user_data:
                context.user_data[f"multi_vote_{vote_id}"] = set()

            selected = context.user_data[f"multi_vote_{vote_id}"]
            if option_value in selected:
                selected.remove(option_value)
            else:
                selected.add(option_value)
            buttons = []
            for i, option in enumerate(vote_data["options"]):
                prefix = "‚òëÔ∏è" if option in selected else "‚òê"
                buttons.append([InlineKeyboardButton(
                    f"{prefix} {i + 1}. {option}",
                    callback_data=f"general_vote_{vote_id}_option_{i}"
                )])

            buttons.append(
                [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data=f"general_vote_{vote_id}_confirm")])

            await query.edit_message_text(
                f"{vote_data['question']}\n\n"
                f"–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∞–±–æ –∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤, –ø–æ—Ç—ñ–º –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–±—ñ—Ä':",
                reply_markup=InlineKeyboardMarkup(buttons)
            )

    elif response_type == "confirm":
        if f"multi_vote_{vote_id}" in context.user_data:
            selected = list(context.user_data[f"multi_vote_{vote_id}"])
            if selected:
                response_value = ", ".join(selected)

                responses["votes"][vote_id][user_id] = {
                    "name": user_name,
                    "response": response_value,
                }
                save_data(responses, GENERAL_VOTES_FILE)

                del context.user_data[f"multi_vote_{vote_id}"]

                await query.edit_message_text(f"‚úÖ –í–∞—à –≤–∏–±—ñ—Ä '{response_value}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
            else:
                await query.answer("‚ö†Ô∏è –û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω –≤–∞—Ä—ñ–∞–Ω—Ç!", show_alert=True)
        else:
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")


async def handle_text_vote_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    active_vote = None
    for key in context.user_data:
        if key.startswith("text_vote_"):
            vote_id = key.replace("text_vote_", "")
            active_vote = vote_id
            del context.user_data[key]
            break

    if not active_vote:
        return

    users = load_data("users", {})
    user_name = users.get(user_id, {}).get("name", "–ù–µ–≤—ñ–¥–æ–º–∏–π")

    votes = load_data(GENERAL_FILE, {})
    vote_data = votes.get(active_vote)

    if not vote_data:
        await update.message.reply_text("‚ö†Ô∏è –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    responses = load_data(GENERAL_VOTES_FILE, {"votes": {}})
    if active_vote not in responses["votes"]:
        responses["votes"][active_vote] = {}

    responses["votes"][active_vote][user_id] = {
        "name": user_name,
        "response": update.message.text,
    }
    save_data(responses, GENERAL_VOTES_FILE)

    await update.message.reply_text("‚úÖ –í–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")


async def close_vote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.message.from_user.id):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –≥–æ–ª–æ—Å—É–≤–∞–Ω—å.")
        return

    general_votes = load_data(GENERAL_FILE, {})

    active_votes = []
    for vote_id, vote_data in general_votes.items():
        if vote_data.get("is_active", True):
            active_votes.append((vote_id, vote_data))

    if not active_votes:
        await update.message.reply_text("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –≥–æ–ª–æ—Å—É–≤–∞–Ω—å –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è.")
        return

    context.user_data["close_vote_options"] = active_votes

    keyboard = []
    for i, (vote_id, vote_data) in enumerate(active_votes):
        team = vote_data.get("team", "Both")
        team_text = ""
        if team == "Male":
            team_text = " (—á–æ–ª–æ–≤—ñ—á–∞)"
        elif team == "Female":
            team_text = " (–∂—ñ–Ω–æ—á–∞)"

        label = f"{vote_data['question'][:50]}{'...' if len(vote_data['question']) > 50 else ''}{team_text}"
        keyboard.append([InlineKeyboardButton(label, callback_data=f"close_vote_select_{i}")])

    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_close_vote_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    idx = int(query.data.replace("close_vote_select_", ""))
    options = context.user_data.get("close_vote_options", [])

    if idx >= len(options):
        await query.edit_message_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    vote_id, vote_data = options[idx]

    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –¢–∞–∫, –∑–∞–∫—Ä–∏—Ç–∏", callback_data=f"close_vote_confirm_{idx}"),
            InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="close_vote_cancel")
        ]
    ])

    team_names = {"Male": "—á–æ–ª–æ–≤—ñ—á–æ—ó –∫–æ–º–∞–Ω–¥–∏", "Female": "–∂—ñ–Ω–æ—á–æ—ó –∫–æ–º–∞–Ω–¥–∏", "Both": "–æ–±–æ—Ö –∫–æ–º–∞–Ω–¥"}
    team_text = team_names.get(vote_data.get("team", "Both"), "")

    message = f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –∑–∞–∫—Ä–∏—Ç–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è?\n\n"
    message += f"üìä {vote_data['question']}\n"
    message += f"üë• –î–ª—è: {team_text}\n"

    await query.edit_message_text(message, reply_markup=keyboard)


async def handle_close_vote_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "close_vote_cancel":
        await query.edit_message_text("‚ùå –ó–∞–∫—Ä–∏—Ç—Ç—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        return

    idx = int(query.data.replace("close_vote_confirm_", ""))
    options = context.user_data.get("close_vote_options", [])

    if idx >= len(options):
        await query.edit_message_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    vote_id, vote_data = options[idx]

    if vote_data.get("type") == VoteType.YES_NO:
        context.user_data["closing_vote_id"] = vote_id
        context.user_data["closing_vote_data"] = vote_data

        await query.edit_message_text(
            f"–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –æ–ø–ª–∞—Ç–∏ –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è (–≤ –≥—Ä–∏–≤–Ω—è—Ö):\n\n"
            f"üìä {vote_data['question']}\n\n"
            f"–í–≤–µ–¥—ñ—Ç—å:\n"
            f"‚Ä¢ 0 - —è–∫—â–æ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–µ\n"
            f"‚Ä¢ –°—É–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 150)"
        )
        return

    general_votes = load_data(GENERAL_FILE, {})

    if vote_id not in general_votes:
        await query.edit_message_text("‚ö†Ô∏è –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    general_votes[vote_id]["is_active"] = False
    save_data(general_votes, GENERAL_FILE)

    await query.edit_message_text(f"‚úÖ –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ:\n\nüìä {vote_data['question']}")


async def handle_close_vote_amount_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "closing_vote_id" not in context.user_data:
        return

    try:
        amount = int(update.message.text.strip())
        if amount < 0:
            await update.message.reply_text("‚ö†Ô∏è –°—É–º–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–æ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            return
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return

    vote_id = context.user_data["closing_vote_id"]
    vote_data = context.user_data["closing_vote_data"]

    general_votes = load_data(GENERAL_FILE, {})
    if vote_id in general_votes:
        general_votes[vote_id]["is_active"] = False
        save_data(general_votes, GENERAL_FILE)

    if amount > 0:
        await process_general_vote_payments(update, context, vote_id, vote_data, amount)

    del context.user_data["closing_vote_id"]
    del context.user_data["closing_vote_data"]

    success_message = f"‚úÖ –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ:\n\nüìä {vote_data['question']}\n\n"
    if amount > 0:
        success_message += f"üí∞ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–ø–ª–∞—Ç—É {amount} –≥—Ä–Ω –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É—á–∞—Å–Ω–∏–∫–∞–º"
    else:
        success_message += "üÜì –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–µ"

    await update.message.reply_text(success_message)


async def process_general_vote_payments(update, context, vote_id, vote_data, amount):
    from payments import CARD_NUMBER

    responses = load_data(GENERAL_VOTES_FILE, {"votes": {}})
    vote_responses = responses.get("votes", {}).get(vote_id, {})

    yes_voters = [uid for uid, response in vote_responses.items() if response.get("response") == "–¢–∞–∫"]

    if not yes_voters:
        print(f"‚ö†Ô∏è –ù–µ–º–∞—î —É—á–∞—Å–Ω–∏–∫—ñ–≤ –¥–ª—è –æ–ø–ª–∞—Ç–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è {vote_id}")
        return

    payments = load_data("payments", {})

    for uid in yes_voters:
        payment_key = f"general_vote_{vote_id}_{uid}"
        payments[payment_key] = {
            "user_id": uid,
            "training_id": f"general_vote_{vote_id}",
            "general_vote_id": vote_id,
            "amount": amount,
            "total_training_cost": amount,
            "training_datetime": f"–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è: {vote_data['question'][:50]}{'...' if len(vote_data['question']) > 50 else ''}",
            "card": CARD_NUMBER,
            "paid": False
        }

        keyboard = [[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–≤(–ª–∞)",
                                          callback_data=f"paid_yes_general_vote_{vote_id}_{uid}")]]

        try:
            await context.bot.send_message(
                chat_id=int(uid),
                text=(f"üí≥ –¢–∏ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–≤(–ª–∞) '–¢–ê–ö' —É –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—ñ:\n\n"
                      f"üìä {vote_data['question']}\n\n"
                      f"üí∞ –°—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏: {amount} –≥—Ä–Ω\n"
                      f"üí≥ –ö–∞—Ä—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏: `{CARD_NUMBER}`\n\n"
                      f"–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, –∫–æ–ª–∏ –æ–ø–ª–∞—Ç–∏—à:"),
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É {uid}: {e}")

    save_data(payments, "payments")


async def cancel_vote_creation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END


async def vote_for(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.message.from_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return ConversationHandler.END

    user_data = load_data("users")
    admin_id = str(update.message.from_user.id)
    admin_team = user_data.get(admin_id, {}).get("team", "Both")
    context.user_data["admin_team"] = admin_team

    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∞–±–æ –ø—Ä—ñ–∑–≤–∏—â–µ –ª—é–¥–∏–Ω–∏, –∑–∞ —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞—Ç–∏:")
    return VOTE_OTHER_NAME


async def vote_other_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    context.user_data["vote_other_name"] = name
    context.user_data["vote_other_id"] = f"admin_{uuid.uuid4().hex[:8]}"

    admin_team = context.user_data.get("admin_team", "Both")

    all_votes = []

    unified_manager = UnifiedVoteManager()
    training_votes = unified_manager._get_training_votes("", admin_team)

    for training_vote in training_votes:
        training_id = training_vote["id"]
        label = training_vote["label"]
        training_data = training_vote["data"]
        all_votes.append(("training", training_id, label, training_data))

    games = load_data(GAMES_FILE, {})
    now = datetime.datetime.now()

    for game in games.values():
        if game.get("team") not in [admin_team, "Both"]:
            continue

        try:
            game_datetime = datetime.datetime.strptime(f"{game['date']} {game['time']}", "%d.%m.%Y %H:%M")
            if game_datetime > now:
                type_names = {
                    "friendly": "–¢–æ–≤–∞—Ä–∏—Å—å–∫–∏–π –º–∞—Ç—á",
                    "tournament": "–¢—É—Ä–Ω—ñ—Ä",
                    "league": "–ß–µ–º–ø—ñ–æ–Ω–∞—Ç/–õ—ñ–≥–∞",
                    "training_match": "–¢—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏–π –º–∞—Ç—á"
                }
                type_name = type_names.get(game.get('type'), game.get('type', '–ì—Ä–∞'))
                label = f"üèÜ {type_name} - {game['date']} {game['time']} –ø—Ä–æ—Ç–∏ {game['opponent']}"
                all_votes.append(("game", game['id'], label, game))
        except ValueError:
            continue

    general_votes = load_data(GENERAL_FILE, {})
    for vote_id, vote_data in general_votes.items():
        if not vote_data.get("is_active", True):
            continue
        if vote_data.get("team") not in [admin_team, "Both"]:
            continue

        label = f"üìä {vote_data['question'][:50]}{'...' if len(vote_data['question']) > 50 else ''}"
        all_votes.append(("general", vote_id, label, vote_data))

    if not all_votes:
        await update.message.reply_text("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥–æ–ª–æ—Å—É–≤–∞–Ω—å.")
        return ConversationHandler.END

    context.user_data["vote_other_options"] = all_votes

    keyboard = [
        [InlineKeyboardButton(label, callback_data=f"vote_other_{i}")]
        for i, (_, _, label, _) in enumerate(all_votes)
    ]

    await update.message.reply_text(
        f"–í–∏ –≥–æ–ª–æ—Å—É—î—Ç–µ –∑–∞: {name}\n\nüìä –û–±–µ—Ä—ñ—Ç—å –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return VOTE_OTHER_SELECT


async def handle_vote_other_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    idx = int(query.data.replace("vote_other_", ""))
    options = context.user_data.get("vote_other_options", [])

    if idx >= len(options):
        await query.edit_message_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –≤–∏–±—Ä–∞–Ω–µ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –±—ñ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–µ.")
        return ConversationHandler.END

    vote_type, vote_id, label, vote_data = options[idx]
    name = context.user_data["vote_other_name"]

    context.user_data["vote_other_type"] = vote_type
    context.user_data["vote_other_vote_id"] = vote_id
    context.user_data["vote_other_vote_data"] = vote_data

    if vote_type == "training":
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –¢–∞–∫ (–ë–£–î–ï)", callback_data="vote_other_cast_yes"),
                InlineKeyboardButton("‚ùå –ù—ñ (–ù–ï –ë–£–î–ï)", callback_data="vote_other_cast_no")
            ]
        ]
        message = f"–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞: {name}\nüèê –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {format_training_id(vote_id)}\n\n–Ø–∫–∏–π –≥–æ–ª–æ—Å –ø–æ—Å—Ç–∞–≤–∏—Ç–∏?"

    elif vote_type == "game":
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –¢–∞–∫ (–ë–£–î–ï)", callback_data="vote_other_cast_yes"),
                InlineKeyboardButton("‚ùå –ù—ñ (–ù–ï –ë–£–î–ï)", callback_data="vote_other_cast_no")
            ]
        ]
        type_names = {
            "friendly": "–¢–æ–≤–∞—Ä–∏—Å—å–∫–∏–π –º–∞—Ç—á",
            "tournament": "–¢—É—Ä–Ω—ñ—Ä",
            "league": "–ß–µ–º–ø—ñ–æ–Ω–∞—Ç/–õ—ñ–≥–∞",
            "training_match": "–¢—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏–π –º–∞—Ç—á"
        }
        type_name = type_names.get(vote_data.get('type'), vote_data.get('type', '–ì—Ä–∞'))
        message = f"–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞: {name}\nüèÜ {type_name}\nüìÖ {vote_data['date']} –æ {vote_data['time']}\nüèÜ –ü—Ä–æ—Ç–∏: {vote_data['opponent']}\n\n–Ø–∫–∏–π –≥–æ–ª–æ—Å –ø–æ—Å—Ç–∞–≤–∏—Ç–∏?"

    elif vote_type == "general":
        if vote_data["type"] == "yes_no":
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data="vote_other_cast_yes"),
                    InlineKeyboardButton("‚ùå –ù—ñ", callback_data="vote_other_cast_no")
                ]
            ]
            message = f"–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞: {name}\nüìä {vote_data['question']}\n\n–Ø–∫–∏–π –≥–æ–ª–æ—Å –ø–æ—Å—Ç–∞–≤–∏—Ç–∏?"

        elif vote_data["type"] in ["multiple_choice_single", "multiple_choice_multi"]:
            keyboard = []
            for i, option in enumerate(vote_data["options"]):
                keyboard.append([InlineKeyboardButton(
                    f"{i + 1}. {option}",
                    callback_data=f"vote_other_cast_option_{i}"
                )])
            message = f"–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞: {name}\nüìä {vote_data['question']}\n\n–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç:"

        else:  # text_response
            await query.edit_message_text(
                f"–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞: {name}\nüìä {vote_data['question']}\n\n–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ:"
            )
            return ConversationHandler.END

    await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))


async def handle_vote_other_cast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    async def save_general_response(vote_id: str, user_id: str, name: str, response: str):
        responses = load_data(GENERAL_VOTES_FILE, {"votes": {}})
        if vote_id not in responses["votes"]:
            responses["votes"][vote_id] = {}
        responses["votes"][vote_id][user_id] = {
            "name": name,
            "response": response,
        }
        save_data(responses, GENERAL_VOTES_FILE)

    async def save_training_vote(vote_id: str, user_id: str, name: str, vote: str):
        votes = load_data(TRAINING_VOTES_FILE, DEFAULT_VOTES_STRUCTURE)
        if vote_id not in votes["votes"]:
            votes["votes"][vote_id] = {}
        votes["votes"][vote_id][user_id] = {"name": name, "vote": vote}
        save_data(votes, TRAINING_VOTES_FILE)

    async def save_game_vote(vote_id: str, user_id: str, name: str, vote: str):
        game_votes = load_data(GAME_VOTES_FILE, {"votes": {}})
        if vote_id not in game_votes["votes"]:
            game_votes["votes"][vote_id] = {}
        game_votes["votes"][vote_id][user_id] = {
            "name": name,
            "vote": vote,
        }
        save_data(game_votes, GAME_VOTES_FILE)

    if hasattr(update, 'message') and update.message:
        name = context.user_data["vote_other_name"]
        vote_id = context.user_data["vote_other_vote_id"]
        user_id = context.user_data["vote_other_id"]
        response_text = update.message.text

        await save_general_response(vote_id, user_id, name, response_text)
        await update.message.reply_text(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞ '{name}' –∑–±–µ—Ä–µ–∂–µ–Ω–∞: '{response_text}'")
        return ConversationHandler.END
    query = update.callback_query
    await query.answer()

    name = context.user_data["vote_other_name"]
    vote_type = context.user_data["vote_other_type"]
    vote_id = context.user_data["vote_other_vote_id"]
    vote_data = context.user_data["vote_other_vote_data"]
    user_id = context.user_data["vote_other_id"]

    if query.data.startswith("vote_other_cast_option_"):
        option_idx = int(query.data.replace("vote_other_cast_option_", ""))
        response_value = vote_data["options"][option_idx]

        if vote_data["type"] == "multiple_choice_single":
            await save_general_response(vote_id, user_id, name, response_value)
            await query.edit_message_text(f"‚úÖ –ì–æ–ª–æ—Å –∑–∞ '{name}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ '{response_value}'")

        elif vote_data["type"] == "multiple_choice_multi":
            multi_key = f"vote_other_multi_{vote_id}"
            if multi_key not in context.user_data:
                context.user_data[multi_key] = []

            selected = context.user_data[multi_key]
            if response_value in selected:
                selected.remove(response_value)
            else:
                selected.append(response_value)

            keyboard = []
            for i, option in enumerate(vote_data["options"]):
                prefix = "‚òëÔ∏è" if option in selected else "‚òê"
                keyboard.append([InlineKeyboardButton(
                    f"{prefix} {i + 1}. {option}",
                    callback_data=f"vote_other_cast_option_{i}"
                )])
            keyboard.append([InlineKeyboardButton(
                "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–±—ñ—Ä",
                callback_data="vote_other_cast_multi_confirm"
            )])

            await query.edit_message_text(
                f"–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞: {name}\nüìä {vote_data['question']}\n\n–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç–∏:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

    elif query.data == "vote_other_cast_multi_confirm":
        multi_key = f"vote_other_multi_{vote_id}"
        selected = context.user_data.get(multi_key, [])

        if selected:
            response_value = ", ".join(selected)
            await save_general_response(vote_id, user_id, name, response_value)

            if multi_key in context.user_data:
                del context.user_data[multi_key]

            await query.edit_message_text(f"‚úÖ –ú–Ω–æ–∂–∏–Ω–Ω–∏–π –≤–∏–±—ñ—Ä –∑–∞ '{name}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ: '{response_value}'")
        else:
            await query.answer("‚ö†Ô∏è –û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω –≤–∞—Ä—ñ–∞–Ω—Ç!", show_alert=True)
            return

    elif query.data in ["vote_other_cast_yes", "vote_other_cast_no"]:
        is_yes = query.data == "vote_other_cast_yes"

        if vote_type == "training":
            vote_value = "yes" if is_yes else "no"
            await save_training_vote(vote_id, user_id, name, vote_value)
            action = "–ë–£–î–ï" if is_yes else "–ù–ï –ë–£–î–ï"
            await query.edit_message_text(
                f"‚úÖ –ì–æ–ª–æ—Å –∑–∞ '{name}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ '{action}' –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è {format_training_id(vote_id)}")

        elif vote_type == "game":
            vote_value = "yes" if is_yes else "no"
            await save_game_vote(vote_id, user_id, name, vote_value)
            action = "–ë–£–î–ï" if is_yes else "–ù–ï –ë–£–î–ï"
            await query.edit_message_text(f"‚úÖ –ì–æ–ª–æ—Å –∑–∞ '{name}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ '{action}' –Ω–∞ –≥—Ä—É")

        elif vote_type == "general":
            response_value = "–¢–∞–∫" if is_yes else "–ù—ñ"
            await save_general_response(vote_id, user_id, name, response_value)
            await query.edit_message_text(f"‚úÖ –ì–æ–ª–æ—Å –∑–∞ '{name}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ '{response_value}'")

    return ConversationHandler.END


def generate_training_id(training):
    if training["type"] == "one-time":
        return f"{training['date']}_{training['start_hour']:02d}:{training['start_min']:02d}"
    else:
        return f"const_{training['weekday']}_{training['start_hour']:02d}:{training['start_min']:02d}"


async def handle_vote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data.split("_")
    vote = data[1]
    training_id = "_".join(data[2:])

    user_id = str(query.from_user.id)
    user_data = load_data(REGISTRATION_FILE)
    user_name = user_data.get(user_id, {}).get("name", "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á")

    votes = load_data('votes', DEFAULT_VOTES_STRUCTURE)

    if training_id not in votes["votes"]:
        votes["votes"][training_id] = {}
    current_yes_votes = sum(1 for v in votes["votes"][training_id].values() if v["vote"] == "yes")

    changing_to_yes = (
            vote == "yes" and
            user_id in votes["votes"][training_id] and
            votes["votes"][training_id][user_id]["vote"] == "no"
    )

    if vote == "yes" and current_yes_votes >= VOTES_LIMIT and (
            user_id not in votes["votes"][training_id] or changing_to_yes):
        await query.edit_message_text("‚ö†Ô∏è –î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º—É–º –≥–æ–ª–æ—Å—ñ–≤ '—Ç–∞–∫'. –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞—Ç–∏.")
        return

    votes["votes"][training_id][user_id] = {"name": user_name, "vote": vote}
    save_data(votes, 'votes')

    updated_yes_votes = sum(1 for v in votes["votes"][training_id].values() if v["vote"] == "yes")

    message = f"–í–∞—à –≥–æ–ª–æ—Å: {'–ë–£–î–£' if vote == 'yes' else '–ù–ï –ë–£–î–£'} –∑–∞–ø–∏—Å–∞–Ω–æ!"

    if updated_yes_votes == VOTES_LIMIT:
        message += "\n‚ö†Ô∏è –î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º—É–º —É—á–∞—Å–Ω–∏–∫—ñ–≤."

    await query.edit_message_text(message)


def is_vote_active(vote_id, today):
    if "const_" in vote_id:
        return True
    try:
        date = datetime.datetime.strptime(vote_id.split("_")[0], "%d.%m.%Y").date()
        return today <= date
    except Exception:
        return False


async def handle_view_votes_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    idx = int(query.data.replace("view_votes_", ""))
    vote_keys = context.user_data.get("view_votes_options")

    if not vote_keys or idx >= len(vote_keys):
        await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.")
        return

    training_id = vote_keys[idx]
    votes = load_data('votes', {"votes": {}})
    voters = votes["votes"].get(training_id, {})

    yes_list = [v["name"] for v in voters.values() if v["vote"] == "yes"]
    no_list = [v["name"] for v in voters.values() if v["vote"] == "no"]

    label = format_training_id(training_id)

    message = f"üìÖ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {label}\n\n"
    message += f"‚úÖ –ë—É–¥–µ ({len(yes_list)}):\n" + ("\n".join(yes_list) if yes_list else "–ù—ñ—Ö—Ç–æ") + "\n\n"
    message += f"‚ùå –ù–µ –±—É–¥–µ ({len(no_list)}):\n" + ("\n".join(no_list) if no_list else "–ù—ñ—Ö—Ç–æ")

    await query.edit_message_text(message)


async def unlock_training(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.message.from_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    one_time = load_data("one_time_trainings", {})
    constant = load_data("constant_trainings", {})

    options = []

    for tid, t in one_time.items():
        if t.get("team") in ["Male", "Female"]:
            label = f"{t['date']} –æ {t['start_hour']:02d}:{t['start_min']:02d}"
            options.append((tid, "one_time", label))

    for tid, t in constant.items():
        if t.get("team") in ["Male", "Female"]:
            weekday = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü'—è—Ç–Ω–∏—Ü—è", "–°—É–±–æ—Ç–∞", "–ù–µ–¥—ñ–ª—è"][t["weekday"]]
            label = f"{weekday} –æ {t['start_hour']:02d}:{t['start_min']:02d}"
            options.append((tid, "constant", label))

    if not options:
        await update.message.reply_text("–ù–µ–º–∞—î —Ç—Ä–µ–Ω—É–≤–∞–Ω—å, —è–∫—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è.")
        return

    context.user_data["unlock_options"] = options

    keyboard = [
        [InlineKeyboardButton(label, callback_data=f"unlock_training_{i}")]
        for i, (_, _, label) in enumerate(options)
    ]

    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è, —â–æ–± –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –æ–±–æ–º –∫–æ–º–∞–Ω–¥–∞–º:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_unlock_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    idx = int(query.data.replace("unlock_training_", ""))
    options = context.user_data.get("unlock_options", [])

    if idx >= len(options):
        await query.edit_message_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    tid, ttype, _ = options[idx]
    trainings = load_data("one_time_trainings" if ttype == "one_time" else "constant_trainings", {})

    if tid not in trainings:
        await query.edit_message_text("‚ö†Ô∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    old_team = trainings[tid]["team"]

    trainings[tid]["team"] = "Both"
    save_data(trainings, "one_time_trainings" if ttype == "one_time" else "constant_trainings")

    await notify_team_about_unlock(context, trainings[tid], tid, ttype, old_team)

    await query.edit_message_text("‚úÖ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ. –¢–µ–ø–µ—Ä –æ–±–∏–¥–≤—ñ –∫–æ–º–∞–Ω–¥–∏ –º–æ–∂—É—Ç—å –≥–æ–ª–æ—Å—É–≤–∞—Ç–∏.")


async def notify_team_about_unlock(context, training, training_id, training_type, old_team):
    users = load_data("users", {})

    target_team = "Female" if old_team == "Male" else "Male"

    if training_type == "one_time":
        date_str = training['date']
        vote_id = f"{training['date']}_{training['start_hour']:02d}:{training['start_min']:02d}"
    else:
        weekdays = ["–ø–æ–Ω–µ–¥—ñ–ª–æ–∫", "–≤—ñ–≤—Ç–æ—Ä–æ–∫", "—Å–µ—Ä–µ–¥—É", "—á–µ—Ç–≤–µ—Ä", "–ø'—è—Ç–Ω–∏—Ü—é", "—Å—É–±–æ—Ç—É", "–Ω–µ–¥—ñ–ª—é"]
        date_str = weekdays[training['weekday']]
        vote_id = f"const_{training['weekday']}_{training['start_hour']:02d}:{training['start_min']:02d}"

    start_time = f"{training['start_hour']:02d}:{training['start_min']:02d}"
    end_time = f"{training['end_hour']:02d}:{training['end_min']:02d}"

    coach_str = " (–ó —Ç—Ä–µ–Ω–µ—Ä–æ–º)" if training.get("with_coach") else ""
    location = training.get("location", "")
    location = "" if location and location.lower() == "–Ω–∞—É–∫–º–∞" else location
    loc_str = f"\nüìç {location}" if location else ""
    description = training.get("description", "")
    desc_str = f"\n‚ÑπÔ∏è {description}" if description else ""

    old_team_name = "—á–æ–ª–æ–≤—ñ—á–æ—ó" if old_team == "Male" else "–∂—ñ–Ω–æ—á–æ—ó"

    message = (
        f"–î–æ—Å—Ç—É–ø–Ω–µ –Ω–æ–≤–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è!\n\n"
        f"–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è {'–≤ ' if training_type == 'constant' else ''}{date_str}{coach_str}\n"
        f"‚è∞ –ó {start_time} –¥–æ {end_time}"
        f"{loc_str}"
        f"{desc_str}\n\n"
        f"–¶–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —Ç–µ–ø–µ—Ä –≤—ñ–¥–∫—Ä–∏—Ç–æ –¥–ª—è –≤—Å—ñ—Ö!\n"
        f"–ß–∏ –±—É–¥–µ—Ç–µ –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å?"
    )

    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data=f"vote_yes_{vote_id}"),
            InlineKeyboardButton("‚ùå –ù—ñ", callback_data=f"vote_no_{vote_id}")
        ]
    ])

    count = 0
    for uid, user_info in users.items():
        if user_info.get("team") == target_team:
            try:
                await context.bot.send_message(
                    chat_id=int(uid),
                    text=message,
                    reply_markup=keyboard
                )
                count += 1
            except Exception as e:
                print(f"‚ùå UNLOCK NOTIFY: –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–æ {uid}: {e}")


class UnifiedViewManager:
    def get_all_active_votes(self):
        all_votes = []

        training_votes = self._get_active_training_votes()
        all_votes.extend(training_votes)

        game_votes = self._get_active_game_votes()
        all_votes.extend(game_votes)

        general_votes = self._get_active_general_votes()
        all_votes.extend(general_votes)

        return all_votes

    def _get_active_training_votes(self):
        one_time_trainings = load_data(ONE_TIME_TRAININGS_FILE, {})
        constant_trainings = load_data(CONSTANT_TRAININGS_FILE, {})

        training_votes = []
        votes_data = load_data(TRAINING_VOTES_FILE, DEFAULT_VOTES_STRUCTURE)

        for training_id, training in one_time_trainings.items():
            if not training.get("voting_opened", False):
                continue

            vote_id = f"{training['date']}_{training['start_hour']:02d}:{training['start_min']:02d}"

            if vote_id in votes_data["votes"] and votes_data["votes"][vote_id]:
                label = self._format_training_label(training, vote_id)
                training_votes.append({
                    "type": "training",
                    "id": vote_id,
                    "label": label,
                    "data": training,
                    "votes": votes_data["votes"][vote_id]
                })

        for training_id, training in constant_trainings.items():
            if not training.get("voting_opened", False):
                continue

            vote_id = f"const_{training['weekday']}_{training['start_hour']:02d}:{training['start_min']:02d}"

            if vote_id in votes_data["votes"] and votes_data["votes"][vote_id]:
                label = self._format_training_label(training, vote_id)
                training_votes.append({
                    "type": "training",
                    "id": vote_id,
                    "label": label,
                    "data": training,
                    "votes": votes_data["votes"][vote_id]
                })

        return training_votes

    def _get_active_game_votes(self):
        games = load_data(GAMES_FILE, {})
        game_votes_data = load_data(GAME_VOTES_FILE, {"votes": {}})
        now = datetime.datetime.now()
        game_votes = []

        for game in games.values():
            try:
                game_datetime = datetime.datetime.strptime(f"{game['date']} {game['time']}", "%d.%m.%Y %H:%M")
                if game_datetime > now and game['id'] in game_votes_data["votes"]:
                    label = self._format_game_label(game)
                    game_votes.append({
                        "type": "game",
                        "id": game['id'],
                        "label": label,
                        "data": game,
                        "votes": game_votes_data["votes"][game['id']]
                    })
            except ValueError:
                continue

        return game_votes

    def _get_active_general_votes(self):
        votes = load_data(GENERAL_FILE, {})
        responses = load_data(GENERAL_VOTES_FILE, {"votes": {}})
        general_votes = []

        for vote_id, vote_data in votes.items():
            if not vote_data.get("is_active", True):
                continue

            if vote_id in responses.get("votes", {}) and responses["votes"][vote_id]:
                label = f"üìä {vote_data['question'][:50]}{'...' if len(vote_data['question']) > 50 else ''}"

                team = vote_data.get("team", "Both")
                if team == "Male":
                    label += " (—á–æ–ª–æ–≤—ñ—á–∞)"
                elif team == "Female":
                    label += " (–∂—ñ–Ω–æ—á–∞)"
                elif team == "Both":
                    label += " (–æ–±–∏–¥–≤—ñ)"

                general_votes.append({
                    "type": "general",
                    "id": vote_id,
                    "label": label,
                    "data": vote_data,
                    "votes": responses["votes"][vote_id]
                })

        return general_votes

    def _is_training_active(self, training, today):
        if training["type"] == "one-time":
            try:
                training_date = datetime.datetime.strptime(training["date"], "%d.%m.%Y").date() if isinstance(
                    training["date"], str) else training["date"]
                return training_date >= today
            except:
                return False
        else:
            return True

    def _format_training_label(self, training, training_id):
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –ø–æ training_id
        if "const_" in training_id:
            # –ü–æ—Å—Ç—ñ–π–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
            weekday = training.get("weekday", 0)
            date_str = WEEKDAYS[weekday] if 0 <= weekday < len(WEEKDAYS) else "–ù–µ–≤—ñ–¥–æ–º–æ"
        else:
            # –û–¥–Ω–æ—Ä–∞–∑–æ–≤–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è - date –∑–∞–≤–∂–¥–∏ —Ä—è–¥–æ–∫ –∑ –±–∞–∑–∏
            date_str = training.get("date", "")

        time_str = f"{training.get('start_hour', 0):02d}:{training.get('start_min', 0):02d}"
        base_label = f"üèê {date_str} {time_str}"

        extra_info = []

        team = training.get("team", "Both")
        if team == "Male":
            extra_info.append("—á–æ–ª–æ–≤—ñ—á–∞")
        elif team == "Female":
            extra_info.append("–∂—ñ–Ω–æ—á–∞")

        if training.get("with_coach"):
            extra_info.append("–ó —Ç—Ä–µ–Ω–µ—Ä–æ–º")

        location = training.get("location", "")
        if location and location.lower() != "–Ω–∞—É–∫–º–∞" and not location.startswith("http"):
            extra_info.append(location)

        description = training.get("description", "")
        if description:
            extra_info.append(description)

        if extra_info:
            base_label += f" ({' - '.join(extra_info)})"

        return base_label

    def _format_game_label(self, game):
        type_names = {
            "friendly": "–¢–æ–≤–∞—Ä–∏—Å—å–∫–∞ –≥—Ä–∞",
            "stolichka": "–°—Ç–æ–ª–∏—á–Ω–∞ –ª—ñ–≥–∞",
            "universiad": "–£–Ω—ñ–≤–µ—Ä—Å—ñ–∞–¥–∞"
        }

        type_name = type_names.get(game.get('type'), game.get('type', '–ì—Ä–∞'))
        label = f"üèÜ {type_name} - {game['date']} {game['time']}"
        label += f" –ø—Ä–æ—Ç–∏ {game['opponent']}"

        team = game.get("team", "Both")
        if team == "Male":
            label += " (—á–æ–ª–æ–≤—ñ—á–∞)"
        elif team == "Female":
            label += " (–∂—ñ–Ω–æ—á–∞)"

        return label

    def format_vote_results(self, vote_item):
        vote_type = vote_item["type"]
        label = vote_item["label"]
        votes_data = vote_item["votes"]

        if vote_type in ["training", "game"]:
            yes_list = [v["name"] for v in votes_data.values() if v.get("vote") == "yes"]
            no_list = [v["name"] for v in votes_data.values() if v.get("vote") == "no"]

            message = f"{label}\n\n"
            message += f"‚úÖ –ë—É–¥—É—Ç—å ({len(yes_list)}):\n"
            message += "\n".join(yes_list) if yes_list else "–ù—ñ—Ö—Ç–æ"
            message += f"\n\n‚ùå –ù–µ –±—É–¥—É—Ç—å ({len(no_list)}):\n"
            message += "\n".join(no_list) if no_list else "–ù—ñ—Ö—Ç–æ"

        elif vote_type == "general":
            vote_data = vote_item["data"]
            message = f"{label}\n\n"

            if vote_data["type"] == "yes_no":
                yes_list = [v["name"] for v in votes_data.values() if v["response"] == "–¢–∞–∫"]
                no_list = [v["name"] for v in votes_data.values() if v["response"] == "–ù—ñ"]

                message += f"‚úÖ –¢–∞–∫ ({len(yes_list)}):\n"
                message += "\n".join(yes_list) if yes_list else "–ù—ñ—Ö—Ç–æ"
                message += f"\n\n‚ùå –ù—ñ ({len(no_list)}):\n"
                message += "\n".join(no_list) if no_list else "–ù—ñ—Ö—Ç–æ"

            elif vote_data["type"] in ["multiple_choice_single", "multiple_choice_multi"]:
                option_counts = {}
                for option in vote_data["options"]:
                    option_counts[option] = []

                for response in votes_data.values():
                    if vote_data["type"] == "multiple_choice_multi":
                        selected_options = [opt.strip() for opt in response["response"].split(",")]
                        for opt in selected_options:
                            if opt in option_counts:
                                option_counts[opt].append(response["name"])
                    else:
                        if response["response"] in option_counts:
                            option_counts[response["response"]].append(response["name"])

                for option, names in option_counts.items():
                    message += f"‚Ä¢ {option} ({len(names)}):\n"
                    if names:
                        message += "  " + ", ".join(names) + "\n"
                    else:
                        message += "  –ù—ñ—Ö—Ç–æ\n"
                    message += "\n"

            else:  # text_response
                message += "–í—ñ–¥–ø–æ–≤—ñ–¥—ñ:\n\n"
                for i, response in enumerate(votes_data.values(), 1):
                    message += f"{i}. {response['name']}: {response['response']}\n\n"

        return message


unified_view_manager = UnifiedViewManager()


async def unified_view_votes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    user_data = load_data("users")

    if user_id not in user_data or "team" not in user_data[user_id]:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.")
        return

    all_votes = unified_view_manager.get_all_active_votes()

    if not all_votes:
        await update.message.reply_text("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –≥–æ–ª–æ—Å—É–≤–∞–Ω—å –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.")
        return

    keyboard = []
    context.user_data["view_votes_options"] = all_votes

    for idx, vote in enumerate(all_votes):
        keyboard.append([InlineKeyboardButton(vote["label"], callback_data=f"view_unified_{idx}")])

    await update.message.reply_text(
        "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω—å:\n\n–û–±–µ—Ä—ñ—Ç—å –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_unified_view_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    idx = int(query.data.replace("view_unified_", ""))
    vote_options = context.user_data.get("view_votes_options", [])

    if idx >= len(vote_options):
        await query.edit_message_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –≤–∏–±—Ä–∞–Ω–µ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –±—ñ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–µ.")
        return

    selected_vote = vote_options[idx]

    results_message = unified_view_manager.format_vote_results(selected_vote)

    if len(results_message) > 4000:
        parts = [results_message[i:i + 4000] for i in range(0, len(results_message), 4000)]
        for part in parts:
            await query.message.reply_text(part)
        await query.delete_message()
    else:
        await query.edit_message_text(results_message)


async def vote_notify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.message.from_user.id):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å.")
        return

    general_votes = load_data(GENERAL_FILE, {})
    general_responses = load_data(GENERAL_VOTES_FILE, {"votes": {}})

    active_votes = []
    for vote_id, vote_data in general_votes.items():
        if vote_data.get("is_active", True):
            active_votes.append((vote_id, vote_data))

    if not active_votes:
        await update.message.reply_text("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≥–∞–ª—å–Ω–∏—Ö –≥–æ–ª–æ—Å—É–≤–∞–Ω—å.")
        return

    context.user_data["notify_vote_options"] = active_votes

    keyboard = []
    for i, (vote_id, vote_data) in enumerate(active_votes):
        team = vote_data.get("team", "Both")
        team_text = ""
        if team == "Male":
            team_text = " (—á–æ–ª–æ–≤—ñ—á–∞)"
        elif team == "Female":
            team_text = " (–∂—ñ–Ω–æ—á–∞)"

        label = f"{vote_data['question'][:40]}{'...' if len(vote_data['question']) > 40 else ''}{team_text}"
        keyboard.append([InlineKeyboardButton(label, callback_data=f"notify_vote_{i}")])

    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_vote_notify_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    idx = int(query.data.replace("notify_vote_", ""))
    vote_options = context.user_data.get("notify_vote_options", [])

    if idx >= len(vote_options):
        await query.edit_message_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    vote_id, vote_data = vote_options[idx]

    users = load_data("users", {})
    general_responses = load_data(GENERAL_VOTES_FILE, {"votes": {}})

    voted_users = set()
    if vote_id in general_responses["votes"]:
        voted_users = set(general_responses["votes"][vote_id].keys())

    message = f"üì¢ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è!\n\n"
    message += f"‚ùì {vote_data['question']}\n\n"

    if vote_data["type"] == VoteType.TEXT_RESPONSE:
        message += "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å."
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìù –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"general_vote_{vote_id}_text")]
        ])
    elif vote_data["type"] == VoteType.YES_NO:
        message += "–û–±–µ—Ä—ñ—Ç—å –≤–∞—à –≤–∞—Ä—ñ–∞–Ω—Ç:"
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data=f"general_vote_{vote_id}_yes"),
                InlineKeyboardButton("‚ùå –ù—ñ", callback_data=f"general_vote_{vote_id}_no")
            ]
        ])
    else:
        message += "–û–±–µ—Ä—ñ—Ç—å –≤–∞—à –≤–∞—Ä—ñ–∞–Ω—Ç:"
        buttons = []
        for i, option in enumerate(vote_data["options"]):
            buttons.append([InlineKeyboardButton(
                f"{i + 1}. {option}",
                callback_data=f"general_vote_{vote_id}_option_{i}"
            )])

        if vote_data["type"] == VoteType.MULTIPLE_CHOICE_MULTI:
            buttons.append(
                [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data=f"general_vote_{vote_id}_confirm")])

        keyboard = InlineKeyboardMarkup(buttons)

    count = 0
    for uid, user_info in users.items():
        if vote_data.get("team") not in [user_info.get("team"), "Both"]:
            continue

        if uid in voted_users:
            continue

        try:
            await context.bot.send_message(
                chat_id=int(uid),
                text=message,
                reply_markup=keyboard
            )
            count += 1
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–æ {uid}: {e}")

    await query.edit_message_text(
        f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º\n"
        f"üìä –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è: {vote_data['question']}"
    )


def create_general_vote_handler():
    return ConversationHandler(
        entry_points=[CommandHandler("add_vote", add_vote)],
        states={
            VOTE_TYPE: [CallbackQueryHandler(handle_vote_type, pattern=r"^vote_type_")],
            VOTE_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_vote_question)],
            VOTE_OPTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_vote_options)],
            VOTE_TEAM: [CallbackQueryHandler(handle_vote_team, pattern=r"^general_vote_team_")]
        },
        fallbacks=[CommandHandler("cancel", cancel_vote_creation)]
    )


def create_vot_for_handler():
    return ConversationHandler(
        entry_points=[CommandHandler("vote_for", vote_for)],
        states={
            VOTE_OTHER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, vote_other_name)],
            VOTE_OTHER_SELECT: [CallbackQueryHandler(handle_vote_other_selection, pattern=r"^vote_other_\d+")]
        },
        fallbacks=[],
        allow_reentry=True
    )


def setup_voting_handlers(app):
    # /vote
    app.add_handler(CommandHandler("vote", unified_vote_command))
    # /view_votesd
    app.add_handler(CommandHandler("view_votes", unified_view_votes))
    # Admin: /close_vote
    app.add_handler(CommandHandler("close_vote", close_vote))
    # Admin: /unlock_training
    app.add_handler(CommandHandler("unlock_training", unlock_training))
    # Admin: /vote_for
    app.add_handler(create_vot_for_handler())
    # Admin: /add_vote
    app.add_handler(create_general_vote_handler())
    # Admin: vote_notify
    app.add_handler(CommandHandler("vote_notify", vote_notify))

    # Other
    # app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_vote_input)) # WITH THIS UNCOMMENTED SEND MESSAGE DOESN'T WORK
    app.add_handler(CallbackQueryHandler(handle_unified_vote_selection, pattern=r"^unified_vote_\d+$"))
    app.add_handler(CallbackQueryHandler(handle_vote, pattern=r"^vote_(yes|no)_"))
    app.add_handler(CallbackQueryHandler(handle_unified_view_selection, pattern=r"^view_unified_\d+$"))
    app.add_handler(CallbackQueryHandler(handle_view_votes_selection, pattern=r"^view_votes_\d+"))
    app.add_handler(CallbackQueryHandler(handle_vote_other_cast, pattern=r"^vote_other_cast_"))
    app.add_handler(CallbackQueryHandler(handle_general_vote_response, pattern=r"^general_vote_"))
    app.add_handler(CallbackQueryHandler(handle_unlock_selection, pattern=r"^unlock_training_\d+"))
    app.add_handler(CallbackQueryHandler(handle_vote_notify_selection, pattern=r"^notify_vote_\d+$"))
    app.add_handler(CallbackQueryHandler(handle_close_vote_selection, pattern=r"^close_vote_select_\d+$"))
    app.add_handler(CallbackQueryHandler(handle_close_vote_confirmation, pattern=r"^close_vote_(confirm_\d+|cancel)$"))
    # app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_close_vote_amount_input)) # WITH THIS UNCOMMENTED SEND MESSAGE DOESN'T WORK
