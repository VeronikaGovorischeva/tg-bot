from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from data import load_data, save_data
from trainings import get_last_training
from datetime import datetime, timedelta

DATA_FILE = "users"
PAYMENTS_FILE = "payments"
DEBTS_FILE = "debts"

TRAINING_COST = 1750
CARD_NUMBER = "5375 4141 0273 8014"


def load_debts():
    data = load_data('debts', default=[])
    if isinstance(data, dict) and data:
        return list(data.values())
    return []


def save_debt(debt):
    debts = load_debts()
    debts.append(debt)
    debts_dict = {str(i): debt for i, debt in enumerate(debts)}
    save_data(debts_dict, 'debts')


def load_payments():
    data = load_data('payments', default=[])
    if isinstance(data, dict) and data:
        return list(data.values())
    return []


def save_payment(payment):
    payments = load_payments()
    payments.append(payment)
    payments_dict = {str(i): payment for i, payment in enumerate(payments)}
    save_data(payments_dict, 'payments')


async def charge_all(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    one_time_trainings = load_data("one_time_trainings", {})
    constant_trainings = load_data("constant_trainings", {})

    options = []

    for tid, t in one_time_trainings.items():
        if t.get("status") == "not charged":
            date = t["date"]
            time = f"{t['start_hour']:02d}:{t['start_min']:02d}"
            label = f"{date} –æ {time}"
            options.append((tid, "one_time", label))

    for tid, t in constant_trainings.items():
        if t.get("status") == "not charged":
            weekday = t["weekday"]
            time = f"{t['start_hour']:02d}:{t['start_min']:02d}"
            day = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫","–í—ñ–≤—Ç–æ—Ä–æ–∫","–°–µ—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä","–ü'—è—Ç–Ω–∏—Ü—è","–°—É–±–æ—Ç–∞","–ù–µ–¥—ñ–ª—è"][weekday]
            label = f"{day} –æ {time}"
            options.append((tid, "constant", label))

    if not options:
        await update.message.reply_text("–ù–µ–º–∞—î —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'not charged'.")
        return

    context.user_data["charge_options"] = options

    keyboard = [
        [InlineKeyboardButton(label, callback_data=f"charge_select_{i}")]
        for i, (_, _, label) in enumerate(options)
    ]

    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—ñ–≤:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_charge_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    idx = int(query.data.replace("charge_select_", ""))
    options = context.user_data.get("charge_options", [])
    if idx >= len(options):
        await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    tid, ttype, label = options[idx]

    trainings = load_data("one_time_trainings" if ttype == "one_time" else "constant_trainings")
    training = trainings.get(tid)
    if not training:
        await query.edit_message_text("–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    votes = load_data("votes", {"votes": {}})["votes"]
    training_id = (
        f"{training['date']}_{training['start_hour']:02d}:{training['start_min']:02d}"
        if ttype == "one_time"
        else f"const_{training['weekday']}_{training['start_hour']:02d}:{training['start_min']:02d}"
    )

    if training_id not in votes:
        await query.edit_message_text("–ù—ñ—Ö—Ç–æ –Ω–µ –≥–æ–ª–æ—Å—É–≤–∞–≤ –∑–∞ —Ü–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.")
        return

    voters = votes[training_id]
    yes_voters = [uid for uid, v in voters.items() if v["vote"] == "yes"]
    if not yes_voters:
        await query.edit_message_text("–ù—ñ—Ö—Ç–æ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–≤ '—Ç–∞–∫' –∑–∞ —Ü–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.")
        return

    per_person = round(TRAINING_COST / len(yes_voters)) if training.get("with_coach") else 0
    training_datetime = (
        f"{training['date']} {training['start_hour']:02d}:{training['start_min']:02d}"
        if ttype == "one_time"
        else f"{datetime.today().strftime('%d.%m.%Y')} {training['start_hour']:02d}:{training['start_min']:02d}"
    )

    user_data = load_data("users")

    for uid in yes_voters:
        if str(uid) not in user_data:
            continue

        context.bot_data[f"charge_{uid}"] = {
            "training_id": training_id,
            "amount": per_person,
            "training_datetime": training_datetime,
            "card": CARD_NUMBER
        }

        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–≤(–ª–∞)", callback_data=f"paid_yes_{uid}"),
                InlineKeyboardButton("‚ùå –©–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–≤(–ª–∞)", callback_data=f"paid_no_{uid}")
            ]
        ]

        try:
            await context.bot.send_message(
                chat_id=int(uid),
                text=(
                    f"üí≥ –¢–∏ –≤—ñ–¥–≤—ñ–¥–∞–≤(-–ª–∞) —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è {training_datetime}.\n"
                    f"–°—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏: {per_person} –≥—Ä–Ω\n"
                    f"–ö–∞—Ä—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏: {CARD_NUMBER}\n\n"
                    f"–ù–∞—Ç–∏—Å–Ω–∏, —è–∫—â–æ —Ç–∏ –≤–∂–µ –æ–ø–ª–∞—Ç–∏–≤:"
                ),
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è {uid}: {e}")

    # Update training status
    trainings[tid]["status"] = "charged"
    save_data(trainings, "one_time_trainings" if ttype == "one_time" else "constant_trainings")

    await query.edit_message_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—Å—ñ–º, —Ö—Ç–æ –≥–æ–ª–æ—Å—É–≤–∞–≤ '—Ç–∞–∫'.")



async def handle_payment_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data.split("_")
    user_id = data[2]
    confirmed = data[1] == "yes"

    info = context.bot_data.get(f"charge_{user_id}")
    if not info:
        await query.edit_message_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–ª–∞—Ç—ñ–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    if confirmed:
        save_payment({
            "user_id": user_id,
            "training_id": info["training_id"],
            "amount": info["amount"],
            "training_datetime": info["training_datetime"],
            "card": info["card"]
        })
        await query.edit_message_text("‚úÖ –î—è–∫—É—î–º–æ! –û–ø–ª–∞—Ç—É –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")
    else:
        await query.edit_message_text("‚è≥ –î–æ–±—Ä–µ! –ù–∞–≥–∞–¥–∞–π, —è–∫ —Ç—ñ–ª—å–∫–∏ –æ–ø–ª–∞—Ç–∏—à.")


async def collect_debts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    one_time_trainings = load_data("one_time_trainings", {})
    constant_trainings = load_data("constant_trainings", {})

    options = []

    for tid, t in one_time_trainings.items():
        if t.get("status") == "charged":
            date = t["date"]
            time = f"{t['start_hour']:02d}:{t['start_min']:02d}"
            options.append((tid, "one_time", f"{date} –æ {time}"))

    for tid, t in constant_trainings.items():
        if t.get("status") == "charged":
            weekday = t["weekday"]
            time = f"{t['start_hour']:02d}:{t['start_min']:02d}"
            day = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü'—è—Ç–Ω–∏—Ü—è", "–°—É–±–æ—Ç–∞", "–ù–µ–¥—ñ–ª—è"][weekday]
            options.append((tid, "constant", f"{day} –æ {time}"))

    if not options:
        await update.message.reply_text("–ù–µ–º–∞—î —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'charged'.")
        return

    context.bot_data[f"debt_training_options_{update.effective_user.id}"] = options
    keyboard = [
        [InlineKeyboardButton(label, callback_data=f"debt_check_{i}")]
        for i, (_, _, label) in enumerate(options)
    ]

    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–æ—Ä–≥—ñ–≤:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_debt_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    idx = int(query.data.replace("debt_check_", ""))
    user_id = str(update.effective_user.id)
    options = context.bot_data.get(f"debt_training_options_{user_id}", [])
    if idx >= len(options):
        await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    tid, ttype, label = options[idx]

    trainings = load_data("one_time_trainings" if ttype == "one_time" else "constant_trainings")
    training = trainings.get(tid)
    if not training:
        await query.edit_message_text("–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    training_id = (
        f"{training['date']}_{training['start_hour']:02d}:{training['start_min']:02d}"
        if ttype == "one_time"
        else f"const_{training['weekday']}_{training['start_hour']:02d}:{training['start_min']:02d}"
    )
    training_datetime = (
        f"{training['date']} {training['start_hour']:02d}:{training['start_min']:02d}"
        if ttype == "one_time"
        else f"{datetime.today().strftime('%d.%m.%Y')} {training['start_hour']:02d}:{training['start_min']:02d}"
    )

    votes = load_data("votes", {"votes": {}}).get("votes", {}).get(training_id, {})
    payments = load_data("payments", [])
    paid_ids = {p["user_id"] for p in payments if p["training_id"] == training_id}
    all_yes = [uid for uid, v in votes.items() if v["vote"] == "yes"]
    debtors = [uid for uid in all_yes if uid not in paid_ids]

    if not debtors:
        await query.edit_message_text("–£—Å—ñ, —Ö—Ç–æ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–≤ '—Ç–∞–∫', –≤–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.")
        return

    per_person = round(TRAINING_COST / len(all_yes)) if training.get("with_coach") else 0
    debts_before = load_debts()

    for uid in debtors:
        debt_entry = {
            "user_id": uid,
            "training_id": training_id,
            "amount": per_person,
            "training_datetime": training_datetime,
            "card": CARD_NUMBER
        }
        save_debt(debt_entry)

        total_debt = sum(
            d["amount"] for d in debts_before + [debt_entry] if d["user_id"] == uid
        )

        try:
            await context.bot.send_message(
                chat_id=int(uid),
                text=(
                    f"üö® –¢–∏ –Ω–µ –æ–ø–ª–∞—Ç–∏–≤(-–ª–∞) —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è {training_datetime}.\n"
                    f"‚ûï –î–æ–¥–∞–Ω–æ –¥–æ –±–æ—Ä–≥—É: {per_person} –≥—Ä–Ω\n"
                    f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –±–æ—Ä–≥: {total_debt} –≥—Ä–Ω\n"
                    f"–ö–∞—Ä—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏: {CARD_NUMBER}"
                )
            )
        except Exception as e:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {uid}: {e}")

    # Update training status
    trainings[tid]["status"] = "collected"
    save_data(trainings, "one_time_trainings" if ttype == "one_time" else "constant_trainings")

    await query.edit_message_text(f"üì¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –±–æ—Ä–≥ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {len(debtors)} —É—á–∞—Å–Ω–∏–∫–∞–º.")

async def pay_debt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.message.from_user.id)
    debts = load_data(DEBTS_FILE, {})

    user_debts = [d for d in debts.values() if d["user_id"] == user_id]

    if not user_debts:
        await update.message.reply_text("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –±–æ—Ä–≥—ñ–≤! üéâ")
        return

    context.user_data["pay_debt_options"] = user_debts

    keyboard = [
        [InlineKeyboardButton(
            f"{d['training_datetime']} - {d['amount']} –≥—Ä–Ω",
            callback_data=f"paydebt_select_{i}"
        )] for i, d in enumerate(user_debts)
    ]

    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å –±–æ—Ä–≥, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )



async def handle_pay_debt_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    idx = int(query.data.replace("paydebt_select_", ""))
    options = context.user_data.get("pay_debt_options", [])

    if not options or idx >= len(options):
        await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –±–æ—Ä–≥—É.")
        return

    selected_debt = options[idx]
    context.user_data["selected_debt"] = selected_debt

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –¢–∞–∫, –æ–ø–ª–∞—Ç–∏–≤(–ª–∞)", callback_data="paydebt_confirm_yes"),
            InlineKeyboardButton("‚ùå –ù—ñ, —â–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–≤(–ª–∞)", callback_data="paydebt_confirm_no")
        ]
    ]

    await query.edit_message_text(
        f"–¢–∏ —Ç–æ—á–Ω–æ –æ–ø–ª–∞—Ç–∏–≤(-–ª–∞) {selected_debt['amount']} –≥—Ä–Ω –∑–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è {selected_debt['training_datetime']}?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_pay_debt_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == "paydebt_confirm_no":
        await query.edit_message_text("‚è≥ –î–æ–±—Ä–µ! –ù–∞—Ç–∏—Å–Ω–∏ –∑–Ω–æ–≤—É /pay_debt, –∫–æ–ª–∏ –æ–ø–ª–∞—Ç–∏—à.")
        return

    selected_debt = context.user_data.get("selected_debt")
    if not selected_debt:
        await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: –±–æ—Ä–≥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
        return

    payments = load_data(PAYMENTS_FILE, [])
    payments.append({
        "user_id": selected_debt["user_id"],
        "training_id": selected_debt["training_id"],
        "amount": selected_debt["amount"],
        "training_datetime": selected_debt["training_datetime"],
        "card": selected_debt["card"]
    })
    payments_dict = {str(i): payment for i, payment in enumerate(payments)}
    save_data(payments_dict, PAYMENTS_FILE)

    # Remove debt
    debts = load_data(DEBTS_FILE, {})
    debts = {
        k: v for k, v in debts.items()
        if not (v["user_id"] == selected_debt["user_id"] and v["training_id"] == selected_debt["training_id"])
    }
    save_data(debts, DEBTS_FILE)

    await query.edit_message_text("‚úÖ –î—è–∫—É—î–º–æ! –û–ø–ª–∞—Ç—É –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ —ñ –±–æ—Ä–≥ –≤–∏–¥–∞–ª–µ–Ω–æ.")

